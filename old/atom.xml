<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[revolunet blog]]></title>
  <link href="http://blog.revolunet.com/atom.xml" rel="self"/>
  <link href="http://blog.revolunet.com/"/>
  <updated>2016-06-28T23:58:10+02:00</updated>
  <id>http://blog.revolunet.com/</id>
  <author>
    <name><![CDATA[revolunet team]]></name>
    <email><![CDATA[contact@revolunet.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Extend Google Spreadsheets with npmcdn.com and React]]></title>
    <link href="http://blog.revolunet.com/blog/2016/02/08/extend-google-apps-scripts-with-npmcdn-and-react/"/>
    <updated>2016-02-08T00:00:00+01:00</updated>
    <id>http://blog.revolunet.com/blog/2016/02/08/extend-google-apps-scripts-with-npmcdn-and-react</id>
    <content type="html"><![CDATA[<p>Sometimes you need a solid platform where people can <strong>collaborate in real-time and input data in a structured, reusable way</strong>. Depending on your needs and planning, Google Spreadsheet can be helpful in such cases, specially if you dont have time or ressources to create a full-blown &#8220;admin interface&#8221;.</p>

<p>Of course, a tailored-made admin interface can be &#8220;better&#8221;, but well, Google Spreadsheet is here, <strong>instantly available</strong>, battle-tested, powerful, very flexible and as we&#8217;ll see below, you can even extends the UI.</p>

<p>Also note the powerful Google data APIs gives you <strong>full access to your data</strong> in various ways and there many other ways to exploit yout documents data (create executable APIs, publish the feeds, embed spreadsheet&#8230;)</p>

<p>The main issues for me yet are the google apps scripts disastrous developer experience, but i&#8217;ll give you some tips to reduce the pain :) (most of it is due to security model) and the UI that can be a bit slowish due to client/server interactions.</p>

<p>This example use React, because it&#8217;s sooo 2015, but you&#8217;d better use what makes you happy :)</p>

<h2>How it works</h2>

<p>You google spreadsheets can be extended with <a href="https://developers.google.com/apps-script/reference/spreadsheet/">Google Apps Scripts</a>. These are hosted Javascript files that execute on the server-side, in the Google infrastructure, and have access to various Google APIs and can be triggered right from your documents.</p>

<p>In the case of spreadsheets, these scripts can open <strong>custom isolated modals or sidebars</strong>, which can host random client-side javascript inside an iframe, get data from your docs and send back results to them.</p>

<p>So in this example, we&#8217;ll add a multi-selection widget to our spreadsheet, which will help our users create many-to-many relations in our spreadsheet.</p>

<p><img src="http://blog.revolunet.com//blog.revolunet.com/images/gdoc-apps-script-custom-widget.gif"></p>

<h2>Google Apps Script editor</h2>

<p>This is a <strong>major pain in the @$$</strong>. When you want to script your documents, you must use that editor which lacks all the basics. There are ways to use your preferred editor and GIT, but it&#8217;s for a later article.</p>

<p>We&#8217;ll reduce the code needed here to the minimum : just some glue between our documents and our react widgets.</p>

<p>From you spreadsheet, select <code>Tools &gt; Script Editor</code>.</p>

<p>From here, you can add <code>.gs</code> scripts (server-side javascript) and <code>.html</code> templates which are your custom modals or sidebars and where you can interpolate some values from your docs, using old-school php-like tags.</p>

<p>The code from your html files <strong>cannot talk directly to the documents</strong> but can execute functions from your <code>.gs</code> files.</p>

<h2>The <code>.gs</code> files</h2>

<p>The code here is interpreted when the document opens, on the server-side.</p>

<p>For example, here&#8217;s how you&#8217;d add a new menu entry to your document :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// add a custom menu when the spreadsheet opens</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">onOpen</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">SpreadsheetApp</span><span class="p">.</span><span class="nx">getUi</span><span class="p">()</span>
</span><span class='line'>      <span class="c1">// create a new menu in your spreadsheet</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">createMenu</span><span class="p">(</span><span class="s1">&#39;My Custom menu&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">// add an entry to that menu</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">addItem</span><span class="p">(</span><span class="s1">&#39;Select Guests&#39;</span><span class="p">,</span> <span class="s1">&#39;selectGuests&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">// Warn: forgetting this line can drive you nuts</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">addToUi</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you can define a <code>selectGuests</code> function that do what you need.</p>

<p>In our case, it will open our custom sidebar and pass necessary data (a list of available guests to select from a range in the spreadsheet).</p>

<h2>A custom sidebar with a React widget</h2>

<p>There are various approaches here :</p>

<ul>
<li>create a full bundle with all your javascripts and insert it in the page</li>
<li>use external scripts and add minimal code to the html</li>
</ul>


<p>I prefer the second approach because its lighter and allow cient-side caching for 3rd-party libraries which is faster.</p>

<p>There is a little gem recently published at <a href="npmcdn.com">npmcdn.com</a>; this service from the well-named <a href="http://twitter.com/@mjackson">Michael Jackson</a> allows you to grab any npm module just by adding a script-tag to your html doc. This is the perfect tool to inject <strong>umd libraries</strong> into our iframe.</p>

<p>Here&#8217;s an example sidebar.html :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;https://ssl.gstatic.com/docs/script/css/add-ons1.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//npmcdn.com/react@0.14.7/dist/react.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//npmcdn.com/react-dom@0.14.7/dist/react-dom.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//npmcdn.com/react-multiselect-revolunet@1.0.5&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;&lt;/body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// receive some values from spreadsheet here</span>
</span><span class='line'>    <span class="c1">// turn back strings to JSON</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">choices</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s2">&quot;&lt;?= choices ?&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// instantiate the react component with props</span>
</span><span class='line'>    <span class="c1">// using the umd library name</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">cmp</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nb">window</span><span class="p">[</span><span class="s1">&#39;react-multiselect-revolunet&#39;</span><span class="p">],</span> <span class="p">{</span>
</span><span class='line'>       <span class="nx">choices</span><span class="o">:</span> <span class="nx">choices</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">onChange</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">selection</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// send result to spreadsheet function</span>
</span><span class='line'>          <span class="nx">google</span><span class="p">.</span><span class="nx">script</span><span class="p">.</span><span class="nx">run</span><span class="p">.</span><span class="nx">setActiveCellValue</span><span class="p">(</span><span class="nx">selection</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">));</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// render the component</span>
</span><span class='line'>    <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">cmp</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Open the Sidebar</h2>

<p>The is an example <code>code.gs</code> that triggers our sidebar, send and receives values from it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// this function will be called by our sidebar to update the cell value</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">setActiveCellValue</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">SpreadsheetApp</span><span class="p">.</span><span class="nx">getActiveSheet</span><span class="p">().</span><span class="nx">getActiveCell</span><span class="p">().</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// this is called when user selects the entry in the custom menu</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">selectGuests</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// open our sidebar with a range of possibles from A2:A range</span>
</span><span class='line'>  <span class="nx">openSideBar</span><span class="p">(</span><span class="s2">&quot;Select Guests&quot;</span><span class="p">,</span> <span class="s2">&quot;&#39;Sheet1&#39;!A2:A&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * title: Title of the SideBar</span>
</span><span class='line'><span class="cm"> * range: range where to get choices from</span>
</span><span class='line'><span class="cm"> * valueIndex: 0-based index of the column in the range responsible of values</span>
</span><span class='line'><span class="cm"> * labelIndex: 0-based index of the column in the range responsible of labels (can be the same as values)</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">openSideBar</span><span class="p">(</span><span class="nx">title</span><span class="p">,</span> <span class="nx">range</span><span class="p">,</span> <span class="nx">valueIndex</span><span class="p">,</span> <span class="nx">labelIndex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// grab list of available choices</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">choices</span> <span class="o">=</span> <span class="nx">SpreadsheetApp</span><span class="p">.</span><span class="nx">getActiveSheet</span><span class="p">().</span><span class="nx">getRange</span><span class="p">(</span><span class="nx">range</span><span class="p">).</span><span class="nx">getValues</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// create the template from HTML</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">tpl</span> <span class="o">=</span> <span class="nx">HtmlService</span><span class="p">.</span><span class="nx">createTemplateFromFile</span><span class="p">(</span><span class="s1">&#39;pane.html&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// add data to the templates. needs to be passed as strings !</span>
</span><span class='line'>  <span class="c1">// data structure depends on your widget</span>
</span><span class='line'>  <span class="nx">tpl</span><span class="p">.</span><span class="nx">choices</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">choices</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">choice</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">value</span><span class="o">:</span> <span class="nx">choice</span><span class="p">[</span><span class="nx">valueIndex</span><span class="p">],</span>
</span><span class='line'>      <span class="nx">text</span><span class="o">:</span> <span class="nx">choice</span><span class="p">[</span><span class="nx">labelIndex</span><span class="p">]</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">}).</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">val</span><span class="p">.</span><span class="nx">value</span> <span class="o">&amp;&amp;</span> <span class="nx">val</span><span class="p">.</span><span class="nx">text</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// now, evaluate and execute our template inside a sidebar</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">tpl</span><span class="p">.</span><span class="nx">evaluate</span><span class="p">().</span><span class="nx">setSandboxMode</span><span class="p">(</span><span class="nx">HtmlService</span><span class="p">.</span><span class="nx">SandboxMode</span><span class="p">.</span><span class="nx">IFRAME</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">result</span><span class="p">.</span><span class="nx">setTitle</span><span class="p">(</span><span class="nx">title</span><span class="p">).</span><span class="nx">setWidth</span><span class="p">(</span><span class="mi">300</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">SpreadsheetApp</span><span class="p">.</span><span class="nx">getUi</span><span class="p">().</span><span class="nx">showSidebar</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>With these few tips, you&#8217;re now able to build on top of Google Spreadsheets and add the missing parts you need.</p>

<p>Dont build your company on top of any closed-source product.</p>

<p>Exploit the tools, push the limits, but always keep full control of your data. (see the recent <a href="http://venturebeat.com/2016/02/06/how-to-avoid-the-next-parse-shutdown-scenario/">Parse shutdown</a>)</p>

<p>Once your spreadsheet is well-strutured, you can use the Google Data APIs to extract them, or use one of many available npm modules to do it, like <a href="https://www.npmjs.com/package/spreadsheet-to-json">spreadsheet-to-json</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The web developer survival guide]]></title>
    <link href="http://blog.revolunet.com/blog/2015/09/04/the-web-developer-survival-guide/"/>
    <updated>2015-09-04T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2015/09/04/the-web-developer-survival-guide</id>
    <content type="html"><![CDATA[<p>Applicable mostly to frontend web development teams.</p>

<p>Comments welcome :)</p>

<p>On the same subject, by Eric Eliott : <a href="https://medium.com/javascript-scene/how-to-build-a-high-velocity-development-team-4b2360d34021">How to Build a High Velocity Development Team</a></p>

<p>Even if the main factor for a project success is human relations, providing a friendly, secure and comfy development workflow for your team is essential to improve happiness, and thus encourage high-quality standards.</p>

<h2>TL;DR</h2>

<ul>
<li>Premature optimisation is the root of all evil</li>
<li>Simple and fast dev workflow</li>
<li>Standards tools</li>
<li>Early feedback</li>
<li>Modularity</li>
<li>Quality</li>
</ul>


<h2>Project management</h2>

<p>Reduce the number of tools you use :</p>

<ul>
<li>Issues, milestones&#8230; : GitHub + ZenHub</li>
<li>Slack for centralized communication</li>
<li>Markdown :)</li>
</ul>


<p>As a product owner, define clear goals and deadlines, and detailed user stories and mockups that will act as base reference for future milestones.</p>

<p>As a developer, expose your plans when starting working on a new feature so you can have early feedback from your team. Github issues are cool for that. Think <a href="http://tom.preston-werner.com/2010/08/23/readme-driven-development.html">Readme Driven Development</a>.</p>

<p>Avoid slack-driven-development which can lead to precipitate design decisions, premature optimisations and throwaway features through endless chats; prefer argumented GH issues.</p>

<p>Dont wait months to receive feedback on your feature. Release early to get early end-user feedback and favour useful features.</p>

<p><img src="http://2.bp.blogspot.com/-Yjx5G4Nihko/VWYhDiery2I/AAAAAAAACOY/49BYuU3SJ7s/s1600/Spotify.png" alt="lean" /></p>

<h2>Versionning</h2>

<p>Use GIT with GitHub and a simple but <a href="https://gist.github.com/jbenet/ee6c9ac48068889b0912">effective model</a>.</p>

<p>TL;DR :</p>

<ul>
<li>Production-ready <code>master</code> branch</li>
<li>Pull requests from feature-branches to <code>master</code></li>
<li>Hotfixes pull requests to master</li>
<li>Always mention related issues in commit messages</li>
<li>Use a <code>develop</code> branch to receive PRs for huge upgrades</li>
<li>Never, ever, <code>push --force</code> to a shared branch</li>
</ul>


<p><img src="http://nicoespeon.com/assets/img/git/github-flow-branching-model.jpg" alt="github flow" /></p>

<p>Use <a href="https://gist.github.com/stephenparish/9941e89d80e2bc58a153">standard commit messages</a>, respect <a href="http://semver.org/">SemVer</a> :  Breaking.Feature.Patch.</p>

<p>See <a href="https://github.com/semantic-release/semantic-release">semantic-release</a> for automatic semver based on commit messages.</p>

<h2>Standards</h2>

<p>Choose and use battle-tested industry tools, standards and styleguides.</p>

<p>Provide sane and homogenous defaults for developer environnement :</p>

<ul>
<li>.editorconfig</li>
<li>.babelrc</li>
<li>.eslintrc</li>
<li>npm scripts</li>
</ul>


<p>Don&#8217;t rush on the new hype; Tools are continuously and fastly improving but early adoption means upgrading the whole team skills and may have significant impact on your workflow.</p>

<p>Experiment, make proof-of-concepts, evaluate advantages and anticipate migrations.</p>

<p>Once maturity is here and adoption is wide enough and if effort is worthwhile, engage progressive migration.</p>

<h2>Modularity</h2>

<p>You don&#8217;t want to create a monolithic, highly-coupled application.</p>

<p>Break problems into smaller parts.</p>

<p>From the UNIX philosophy : Build small programs that do one thing, do it well, and compose easily with other programs.</p>

<p>Which means small, focused, testable and tested JavaScript modules, providing a nice API.</p>

<p>see <a href="https://github.com/mattdesl/module-best-practices">JS Modules best practices</a> and <a href="http://addyosmani.com/first/">FIRST principles</a></p>

<p>npm ecosystem is an incredible ressource for JavaScript modules which  come with already existing tests and corner-cases solved for you. USE IT !</p>

<p>npm is a also a powerful packaging tool that makes it easy to publish your own modules and manage dependencies at scale.</p>

<p>By separating concerns of your modules you&#8217;ll improve your velocity and reduce hassle due to working in complex contexts.</p>

<p>Focusing on a specific problem without worrying about third party is the key to solve it.</p>

<p><img class="center" src="http://blog.revolunet.com/images/lego-bricks.jpg"></p>

<h2>Quality</h2>

<p>Unit tests will build trust, save your ass, and make the developer feel more confident to work without breaking something, thus, make him/her much more productive, and happy.</p>

<p>Test the public API, not the internal implementations.</p>

<ul>
<li><a href="https://medium.com/javascript-scene/what-every-unit-test-needs-f6cd34d9836d">5 Questions Every Unit Test Must Answer</a></li>
<li><a href="https://medium.com/javascript-scene/why-i-use-tape-instead-of-mocha-so-should-you-6aa105d8eaf4">Why I use Tape instead of Mocha &amp; so you should</a></li>
</ul>


<p>Test coverage will give you cool insights and motivate you to do more.</p>

<p>Add UI tests (aka &#8220;smoke tests&#8221;) to ensure integration and prevent repetitive and boring manual in-browser course tests.</p>

<p>Tests won&#8217;t guarantee your code is bug-free but will increase quality (early bug fixes + easy refactoring), and most importantly, allow developers to iterate quickly in confidence.</p>

<p>The earlier the bugs are discovered, the cheaper they are to fix.</p>

<p><img src="http://www.jamkey.fr/wp-content/uploads/2015/05/bugs-prices.png" alt="bugs cost" /></p>

<h2>Developer Experience</h2>

<p>Offer powerful MacBooks or Linux laptops.</p>

<p>Comment the code (JsDoc) and provide nice README.md files.</p>

<p>Adding inline comments is cheap and helps later refactoring; Explain the WHY of your code when its not obvious.</p>

<p>Make development fast and easy : when working on a new feature, the developer should be able to install the environment quickly, and iterate with blazing-fast build times and hot-reload.</p>

<p>Choose a solid boilerplate with all your sane defaults.</p>

<ul>
<li>for react : <a href="https://github.com/mzabriskie/rackt-cli">rackt-cli</a></li>
<li>for angular : <a href="https://github.com/Swiip/generator-gulp-angular">generator-gulp-angular</a> - see also <a href="https://github.com/ng-tools/ng-factory">ng-factory</a>, the upgradable development workflow for AngularJS.</li>
<li>for node+babel : <a href="https://github.com/revolunet/node-babel-boilerplate">node-babel-boilerplate</a></li>
</ul>


<h2>Team</h2>

<p>Work hard, Play hard.</p>

<p>Be nice and always be yourself.</p>

<p>There&#8217;s nothing as powerful as trust when you want to move mountains.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create and host a beautiful website for free using GitHub]]></title>
    <link href="http://blog.revolunet.com/blog/2015/07/15/beautiful-static-website-in-minutes-with-github/"/>
    <updated>2015-07-15T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2015/07/15/beautiful-static-website-in-minutes-with-github</id>
    <content type="html"><![CDATA[<p>In this tutorial i&#8217;ll show you how you can setup, publish and host a nice single-page website in minutes and completely free of charge using Github pages.</p>

<p>I assume you&#8217;re you are already familiar with :</p>

<ul>
<li><strong>HTML</strong> : <a href="http://www.cheatography.com/davechild/cheat-sheets/html4/">cheat sheet</a></li>
<li><strong>GitHub</strong> : create a free account here : <a href="http://github.com">github.com</a></li>
</ul>


<p>We&#8217;ll use the awesome GitHub.com to host our <strong>static website</strong> and create it using an existing template. Github hosts your website code history publicly and you benefit, among other things, from code versionning and free, high-quality hosting (cdn, ddos protection&#8230;).</p>

<p><strong>WARN</strong> Files stored on Github are public to anyone (except if you buy a private repo), so don&#8217;t store anything sensible here.</p>

<h2>What is a &#8220;static&#8221; website ?</h2>

<p>For small websites, CMS solutions like WordPress and equivalents are largely overkill and require some technical setup and mandatory maintenance mostly due to security patches and unattended upgrades.</p>

<p>Nowadays, it is possible to create awesome websites in a server-less way, using only client-side technologies. This mean you can host your website anywhere without any configuration, as all the code executes is only in the final user browser (HTML, Javascript and CSS), and this has several advantages :</p>

<ul>
<li>simple</li>
<li>no maintenance</li>
<li>no hacking</li>
<li>better performance</li>
<li>less is more</li>
<li>simple is beautiful</li>
</ul>


<p>Any serious business now offers an API that you can integrate in some way your static website if you need so this static approach has <strong>NO LIMIT</strong>.</p>

<p>Next articles will provide more advanced examples using a <a href="https://www.staticgen.com/">static website
 generator</a>.</p>

<h2>Create the Github repository</h2>

<p>create a new repository for your website : <a href="https://github.com/new">https://github.com/new</a> ex: mywebsite</p>

<p>This will create a public repository at <a href="https://github.com/USERNAME/mywebsite">https://github.com/USERNAME/mywebsite</a></p>

<h2>Single page website with Github page generator</h2>

<p>3-clicks setup using one of the GitHub built-in templates</p>

<p>Go to your github project page, <a href="https://github.com/USERNAME/mywebsite">https://github.com/USERNAME/mywebsite</a></p>

<ul>
<li>Go to <strong>repository settings</strong> (icon in the right-bottom)</li>
<li><strong>Automatic page generator</strong> and click <strong>Launch</strong></li>
<li>Edit your website text</li>
<li>Select a template and <strong>Publish Page</strong></li>
</ul>


<p>Wait a few seconds and goto : <a href="http://USERNAME.github.io/mywebsite">http://USERNAME.github.io/mywebsite</a></p>

<p><strong>✔</strong> your website is up :)</p>

<h2>Edit the website online</h2>

<p>Go to your github project page, <a href="https://github.com/USERNAME/mywebsite">https://github.com/USERNAME/mywebsite</a></p>

<p>This is all your websites files.</p>

<p>Click the file you want to edit, for example <code>index.html</code> (main page), make your changes then click the &#8220;pen&#8221; icon on top-right of the editor.</p>

<p>Under the file editor there&#8217;s a &#8220;Commit changes&#8221; form, set the title to a good description of your changes : ex: &#8220;contact info update&#8221;</p>

<p>Press <strong>Commit changes</strong> button.</p>

<p>Wait a few seconds and goto : <a href="http://USERNAME.github.io/mywebsite">http://USERNAME.github.io/mywebsite</a></p>

<p><strong>✔</strong> your website is updated :)</p>

<h2>Edit the website on your computer</h2>

<p>For more advanced edition and comfort you may want to edit from your <a href="http://atom.io">preferred text editor</a> on your computer.</p>

<p>Setup the GitHub app with your account : <a href="http://mac.github.com">mac.github.com</a> or <a href="http://windows.github.com">windows.github.com</a></p>

<ul>
<li><strong>Clone</strong> the project on your computer, it will download the code from github</li>
<li><strong>Edit</strong> the files on your computer, add javascript, images, etc&#8230;</li>
<li><strong>Test</strong> if everything works locally</li>
<li>Then <strong>Commit</strong> those files with an explicit message from github app</li>
<li><strong>Sync</strong> with Github</li>
</ul>


<p><strong>✔</strong> your website is updated :)</p>

<h2>Test the website locally</h2>

<p>You can open the file in your web browser to test the result.</p>

<p><strong>WARN</strong> If you added google maps or some javascript API, be sure to run <code>python -m SimpleHTTPServer</code> from your console in the project folder, and use http://127.0.0.1:8000 in the browser.</p>

<h2>Use great templates</h2>

<p>If you want different templates than github ones, you just need to replace your repository content with the new one.</p>

<p>Choose one of the high-quality template from <a href="http://html5up.net">html5up.net</a> or <a href="http://pixelarity.com">pixelarity.com</a>, download and extract to your project folder.</p>

<p>Edit the files, test, commit &amp; sync and you&#8217;re done.</p>

<h2>Next steps</h2>

<p>Learn Markdown syntax : <a href="https://en.support.wordpress.com/markdown-quick-reference/">reference</a></p>

<p>Learn GIT : <a href="https://try.github.io">try.github.io</a></p>

<p>Learn Javascript : <a href="http://jsbooks.revolunet.com">jsbooks.revolunet.com</a> and <a href="https://ericelliottjs.com/product/programming-javascript-applications-paper-ebook-bundle/">Eric Elliott book</a></p>

<h2>FAQ</h2>

<h3>How do i setup a domain name ?</h3>

<ul>
<li>Buy a domain from <a href="http://gandi.net">gandi.net</a> (or other serious one)</li>
<li>Edit the domain &#8220;DNS zone&#8221; and follow the <a href="https://help.github.com/articles/tips-for-configuring-a-cname-record-with-your-dns-provider/">github dns instructions</a></li>
<li>add <code>CNAME</code> file, containing <code>www.myproject.com</code>, to your repository</li>
</ul>


<p>The DNS changes can take up to 24h before propagating so try www.myproject.com tomorrow</p>

<p>Github Help :  <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/">custom domain</a>, <a href="https://help.github.com/articles/tips-for-configuring-a-cname-record-with-your-dns-provider/">dns setup</a></p>

<h3>How to add a page ?</h3>

<p>Just add some more html files, like &#8220;products.html&#8221; and add a link to it from index : <code>&lt;a href="products.html"&gt;products&lt;/a&gt;</code>.</p>

<h3>How to get traffic analytics ?</h3>

<p>If you want to track your visitors and analyse where they come from and what they do on your website, create an account on <a href="http://www.google.com/analytics">Google Analytics</a> and add the tracker to your page code.</p>

<h3>How to add a Map ?</h3>

<p>If you need an interactive map, you can follow <a href="https://developers.google.com/maps/tutorials/fundamentals/adding-a-google-map">Google Maps instructions</a>.</p>

<p>Alternatively, follow <a href="http://leafletjs.com/examples/quick-start.html">Leaflet instructions</a> to take avantage of the OpenStreetMap project, which is community driven, free and open source.</p>

<p>If you just need a map image : generate the HTML code from here : <a href="http://staticmapmaker.com">staticmapmaker.com</a> ad copy the &#8220;HTML&#8221; to your page. Full static images doc : <a href="https://developers.google.com/maps/documentation/staticmaps/">https://developers.google.com/maps/documentation/staticmaps/</a></p>

<h3>How to add comments ?</h3>

<p>Create an account on <a href="disqus.com">disqus.com</a> and add the javascript code to your page.</p>

<h3>How to add a contact form ?</h3>

<p>Create an account on <a href="typeform.com">typeform.com</a> and add the javascript code to your page, create the form there and copy the javascript &#8220;embed&#8221; code to your page.</p>

<p>Alternatively : Create an account on <a href="mailchimp.com">mailchimp.com</a>, create the form there and copy the javascript &#8220;embed&#8221; code to your page.</p>

<h3>How to receive payments ?</h3>

<p>Create an account on <a href="stripe.com">stripe.com</a> and add the javascript code to your page.</p>

<h3>What is gh-pages ?</h3>

<p><code>gh-pages</code> is a special &#8220;branch&#8221; (source code version) on github that automagically publish and host a static website.</p>

<p>If you have any question, feel free to ask below :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object-oriented AngularJS services]]></title>
    <link href="http://blog.revolunet.com/blog/2014/02/14/angularjs-services-inheritance/"/>
    <updated>2014-02-14T00:00:00+01:00</updated>
    <id>http://blog.revolunet.com/blog/2014/02/14/angularjs-services-inheritance</id>
    <content type="html"><![CDATA[<p>Javascript prototypal inheritance can be confusing at first if you come from classical OOP languages, due to Javascript versatility, and the <a href="http://shichuan.github.io/javascript-patterns/#code-reuse-patterns">variety</a> of <a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#prototypepatternjavascript">Javascript</a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain">OOP</a> <a href="http://howtonode.org/prototypical-inheritance">patterns</a> <a href="http://javascript.info/tutorial/oop">available</a>. Combined with the new service and factory concepts introduced in AngularJS, implementing OOP in your applications can lead to serious headaches, so i&#8217;ll try to show you some solutions here.</p>

<p>If you need a step-by-step explanation of the Javascript prototypal inheritance, you can read the great <a href="http://www.2ality.com/2012/01/js-inheritance-by-example.html">Dr. Axel Rauschmayer JavaScript inheritance by example</a> article.</p>

<p>Once your app grow and your services multiply, you&#8217;ll quickly feel the need to <strong>reuse your code</strong>, and to split it in small modules to be able to separate concerns and setup some serious unit testing.</p>

<p>In this post, i&#8217;ll show how to create a base AngularJS service, based on the Github API, that we&#8217;ll be able to extend and reuse in different scenarios. We&#8217;ll also leverage the power of promises chaining to extend the server responses and add additional data before returning the final result.</p>

<p>Something important to note here is that <code>factories</code> are useful to define our classes that you can instantiate many times using the <code>new</code> keyword, while <code>services</code> always create singletons.</p>

<h3>Create our base service</h3>

<p>Our first service will be responsible of fetching Github basic user data and return the result. We&#8217;ll use a <code>factory</code> instead of a <code>service</code>, which will make it easier to instantiate many versions of the service in our application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;SimpleGithubUser&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">apiUrl</span> <span class="o">=</span> <span class="s1">&#39;https://api.github.com/&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// instantiate our initial object</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">SimpleGithubUser</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">username</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">username</span> <span class="o">=</span> <span class="nx">username</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">profile</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// define the getProfile method which will fetch data</span>
</span><span class='line'>    <span class="c1">// from GH API and *returns* a promise</span>
</span><span class='line'>    <span class="nx">SimpleGithubUser</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getProfile</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Generally, javascript callbacks, like here the $http.get callback,</span>
</span><span class='line'>        <span class="c1">// change the value of the &quot;this&quot; variable inside it</span>
</span><span class='line'>        <span class="c1">// so we need to keep a reference to the current instance &quot;this&quot; :</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">apiUrl</span> <span class="o">+</span> <span class="s1">&#39;users/&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">username</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// when we get the results we store the data in user.profile</span>
</span><span class='line'>            <span class="nx">self</span><span class="p">.</span><span class="nx">profile</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// promises success should always return something in order to allow chaining</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">response</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">SimpleGithubUser</span><span class="p">;</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we can now easily inject our factory anywhere and use it like this :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// we first inject our factory</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MyCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">SimpleGithubUser</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// instantiate a new user</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SimpleGithubUser</span><span class="p">(</span><span class="s1">&#39;substack&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// fetch data and publish on scope</span>
</span><span class='line'>    <span class="nx">user</span><span class="p">.</span><span class="nx">getProfile</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">userLogin</span> <span class="o">=</span> <span class="nx">user</span><span class="p">.</span><span class="nx">profile</span><span class="p">.</span><span class="nx">login</span><span class="p">;</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Extending the base service</h3>

<p>Now we&#8217;d like to attach some additional data to our users. Instead of modiying the original factory, or even worse, duplicate it, we can create another factory that extends the original one, just by using the regular javascript prototypal inheritance. We&#8217;ll override some methods and use promises chaining to deliver the final data only when all the subsequent requests have been completed.</p>

<p>This has the advantage of encapsulating the logic inside the new service, making it easily testable while keeping your controllers light.</p>

<p>In this example we&#8217;ll add some data from the Github events API and attach it to the user profile before returning the final result.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// we define a new factory and inject our original service so we can extend it properly</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;AdvancedGithubUser&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">,</span> <span class="nx">SimpleGithubUser</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">apiUrl</span> <span class="o">=</span> <span class="s1">&#39;https://api.github.com/&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// create our new custom object that reuse the original object constructor</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">AdvancedGithubUser</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">SimpleGithubUser</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// reuse the original object prototype</span>
</span><span class='line'>    <span class="nx">AdvancedGithubUser</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SimpleGithubUser</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// define a new internal private method for this object</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">getUserEvents</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">apiUrl</span> <span class="o">+</span> <span class="s1">&#39;users/&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">username</span> <span class="o">+</span> <span class="s1">&#39;/events&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// attach the events API result to our user profile</span>
</span><span class='line'>            <span class="nx">self</span><span class="p">.</span><span class="nx">profile</span><span class="p">.</span><span class="nx">events</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// promises should always return a result</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">response</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Now let&#39;s override our original getProfile method</span>
</span><span class='line'>    <span class="nx">AdvancedGithubUser</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getProfile</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// we first call the original getProfile method (aka super method)</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">originalGetProfile</span> <span class="o">=</span> <span class="nx">SimpleGithubUser</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getProfile</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// we use promises chaining to add additional data</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">originalGetProfile</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// before returning the result,</span>
</span><span class='line'>            <span class="c1">// call our new private method and bind &quot;this&quot; to &quot;self&quot;</span>
</span><span class='line'>            <span class="c1">// we need to do this because the method is not part of the prototype</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">getUserEvents</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">self</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">AdvancedGithubUser</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Usage is exactly the same, except the service added the events data for us :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// we first inject our factory</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MyCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">AdvancedGithubUser</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// instantiate a new user</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AdvancedGithubUser</span><span class="p">(</span><span class="s1">&#39;substack&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// fetch data and publish on scope</span>
</span><span class='line'>    <span class="nx">user</span><span class="p">.</span><span class="nx">getProfile</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">userEvents</span> <span class="o">=</span> <span class="nx">user</span><span class="p">.</span><span class="nx">profile</span><span class="p">.</span><span class="nx">events</span><span class="p">;</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Create a service instance</h3>

<p>Now that you have some solid factories, you can also instantiate some app-wide services that expose pre-configured instances.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">service</span><span class="p">(</span><span class="s1">&#39;MyUserProfile&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">AdvancedGithubUser</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AdvancedGithubUser</span><span class="p">(</span><span class="s1">&#39;revolunet&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">user</span><span class="p">.</span><span class="nx">getProfile</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">user</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And use it like this :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MyCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">MyUserProfile</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="nx">MyUserProfile</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="nx">MyUserProfile</span><span class="p">.</span><span class="nx">location</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Final result</h2>

<iframe style="width: 100%; height: 600px" src="http://jsfiddle.net/YLs26/embedded/result,html,js,css/light/"></iframe>


<br><br>


<p>Hope this has been useful to you, please ask below or on twitter <a href="http://twitter.com/revolunet">@revolunet</a> for any question/suggestion :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit testing an AngularJS directive]]></title>
    <link href="http://blog.revolunet.com/blog/2013/12/05/unit-testing-angularjs-directive/"/>
    <updated>2013-12-05T00:00:00+01:00</updated>
    <id>http://blog.revolunet.com/blog/2013/12/05/unit-testing-angularjs-directive</id>
    <content type="html"><![CDATA[<p>In this article, i&#8217;ll detail the process to unit test the stepper directive we&#8217;ve created in the last week <a href="http://blog.revolunet.com/blog/2013/11/28/create-resusable-angularjs-input-component/">custom component creation article</a>. Next week, i&#8217;ll cover how to distribute your component via GitHub and Bower.</p>

<p>Unit testing is the art of testing individually every smallest part of your code, which are the foundations of your apps sanity. Once correctly tested, these parts assembled together will also play nicely, as their behaviour has already been validated independently.</p>

<p>Unit testing helps you <strong>prevent regressions, increase quality, maintenability, and trust in your codebase</strong>, thus better team collaboration, easier refactoring&#8230; and WIN :)</p>

<p>Another usage is, when you get a new bug report, you add the revelant test that demo the bug, fix it in your code so the test will pass, then keep it there as a proof of reliability.</p>

<p>Among AngularJS best friends there is the <a href="http://karma-runner.github.io">KarmaJS test runner</a> (A nodeJS server to launch the tests in browsers and reports the results) and the <a href="http://pivotal.github.io/jasmine/">Jasmine behaviour-driven testing framework</a> (the language to define your tests and expectations). We&#8217;ll use the grunt-karma task to integrate karma in our classic yet awesome grunt workflow and launch the tests in our browsers. Note that karma can run the tests in remote cloud browsers, for example via <a href="http://saucelabs.com/">SauceLabs</a> or <a href="http://www.browserstack.com/">BrowserStack</a>.</p>

<p><strong>AngularJS is made from ground-up for testing, so make yourself a favor, start NOW :)</strong></p>

<h2>Glossary</h2>

<p>There are some terms that may need clarification before we go further :</p>

<ul>
<li><code>spec</code> : the specifications of something you want to test, consisting one or many tests suites. should cover all the expected behaviour.</li>
<li><code>test suite</code> : This is a group of tests; defined within a <code>describe</code> block in Jasmine. blocks can be nested as much as needed.</li>
<li><code>test</code> : Test instructions, that ends with one or more expectations; defined within a <code>it</code> block in Jasmine.</li>
<li><code>actual</code> : this is the value you test in your expectation.</li>
<li><code>expected value</code> : this is the value you test the actual value against.</li>
<li><code>matcher</code> : A function that compares the <code>actual</code> and the <code>expected</code> values and returns a boolean success result to Jasmine. eg : <code>toEqual</code>, <code>toBeGreatherThan</code>, <code>toHaveBeenCalledWith</code>&#8230; you can even define your owns.</li>
<li><code>expectation</code> : Use the expect function to test a value, called the actual. It is chained with a matcher function, which takes the expected value.</li>
<li><code>mock</code> : a stubbed service that replace a real one at runtime with fake data/methods that you can control during your tests.</li>
</ul>


<p>Here&#8217;s an example spec file :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// a test suite (group of tests)</span>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;sample component test&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// a single test</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;ensure addition is correct&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// sample expectation</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="mi">1</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//                  `--- the expected value (2)</span>
</span><span class='line'>        <span class="c1">//             `--- the matcher method (equality)</span>
</span><span class='line'>        <span class="c1">//       `-- the actual value (2)</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="c1">// another test</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;ensure substraction is correct&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Setup the test environnement</h2>

<h4>Add grunt-karma to your project dependencies</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install grunt-karma --save-dev
</span></code></pre></td></tr></table></div></figure>


<h4>Create karma-unit.js file</h4>

<p><a href="https://github.com/revolunet/angular-stepper/blob/master/karma-unit.js">Here is our full example</a>. This file defines :</p>

<ul>
<li>the javascript files to be loaded in the browsers for the tests. Typically, this is the libraries you use, your application files, but also the files for your tests and the eventuals mocks.</li>
<li>which browsers to run the tests against.</li>
<li>how to reports the results : console, browser&#8230; ?</li>
<li>optional plugins.</li>
</ul>


<p>Here&#8217;s our example &#8220;files&#8221; section :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">files</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="s2">&quot;http://code.angularjs.org/1.2.1/angular.js&quot;</span><span class="p">,</span>       <span class="o">&lt;--</span> <span class="nx">angular</span> <span class="nx">source</span>
</span><span class='line'>  <span class="s2">&quot;http://code.angularjs.org/1.2.1/angular-mocks.js&quot;</span><span class="p">,</span> <span class="o">&lt;--</span> <span class="nx">angular</span> <span class="nx">mocks</span> <span class="o">&amp;</span> <span class="nx">test</span> <span class="nx">utils</span>
</span><span class='line'>  <span class="s2">&quot;src/angular-stepper.js&quot;</span><span class="p">,</span>                           <span class="o">&lt;--</span> <span class="nx">our</span> <span class="nx">component</span> <span class="nx">source</span> <span class="nx">code</span>
</span><span class='line'>  <span class="s2">&quot;src/angular-stepper.spec.js&quot;</span>                       <span class="o">&lt;--</span> <span class="nx">our</span> <span class="nx">component</span> <span class="nx">test</span> <span class="nx">suite</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>NB: One could add jquery here if it helps you write your test code (more powerful selectors, CSS tests, size computation&#8230;)</p>

<h4>Add the karma grunt tasks to your Gruntfile.js</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">karma</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">unit</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">configFile</span><span class="o">:</span> <span class="s1">&#39;karma-unit.js&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="c1">// run karma in the background</span>
</span><span class='line'>        <span class="nx">background</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="c1">// which browsers to run the tests on</span>
</span><span class='line'>        <span class="nx">browsers</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Chrome&#39;</span><span class="p">,</span> <span class="s1">&#39;Firefox&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create <code>angular-stepper.spec.js</code> and paste the content of the sample test above. You can now simply run <code>grunt karma</code> and see your tests executing in the browsers and reporting the results in the console.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>....
</span><span class='line'>Chrome 33.0.1712 <span class="o">(</span>Mac OS X 10.9.0<span class="o">)</span>: Executed 2 of 2 SUCCESS <span class="o">(</span>1.65 secs / 0.004 secs<span class="o">)</span>
</span><span class='line'>Firefox 25.0.0 <span class="o">(</span>Mac OS X 10.9<span class="o">)</span>: Executed 2 of 2 SUCCESS <span class="o">(</span>2.085 secs / 0.006 secs<span class="o">)</span>
</span><span class='line'>TOTAL: 4 SUCCESS
</span></code></pre></td></tr></table></div></figure>


<p>Each dot represent a successfull test and you can see our two tests runs in the two browsers we&#8217;ve configured before in our karma-unit.js file. woot !</p>

<p>Now let&#8217;s code the real tests :)</p>

<h2>Code our directive unit tests</h2>

<p>Our component unit test suite, aka the <em>spec</em> should cover all the expected behaviour of our component, but also test the edge cases (eg : invalid input, unexpected server behaviours&#8230;)</p>

<p>Below you can see an extract of our angular-stepper component test suite (angular-stepper.spec.js), and <a href="https://github.com/revolunet/angular-stepper/blob/master/src/angular-stepper.spec.js">here&#8217;s the full spec</a>. Our tests for such a component are quite simple, no need for mocks here. The only tricky thing is that we wrap our directive inside a form to be able to test that it plays well with ngModelController and updates form validity correctly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// the describe keyword is used to define a test suite (group of tests)</span>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;rnStepper directive&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// we declare some global vars to be used in the tests</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">elm</span><span class="p">,</span>        <span class="c1">// our directive jqLite element</span>
</span><span class='line'>        <span class="nx">scope</span><span class="p">;</span>      <span class="c1">// the scope where our directive is inserted</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// load the modules we want to test</span>
</span><span class='line'>    <span class="nx">beforeEach</span><span class="p">(</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;revolunet.stepper&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// before each test, creates a new fresh scope</span>
</span><span class='line'>    <span class="c1">// the inject function interest is to make use of the angularJS</span>
</span><span class='line'>    <span class="c1">// dependency injection to get some other services in our test</span>
</span><span class='line'>    <span class="c1">// here we need $rootScope to create a new scope</span>
</span><span class='line'>    <span class="nx">beforeEach</span><span class="p">(</span><span class="nx">inject</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$rootScope</span><span class="p">,</span> <span class="nx">$compile</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">scope</span> <span class="o">=</span> <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$new</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">scope</span><span class="p">.</span><span class="nx">testModel</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}));</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">compileDirective</span><span class="p">(</span><span class="nx">tpl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// function to compile a fresh directive with the given template, or a default one</span>
</span><span class='line'>        <span class="c1">// compile the tpl with the $rootScope created above</span>
</span><span class='line'>        <span class="c1">// wrap our directive inside a form to be able to test</span>
</span><span class='line'>        <span class="c1">// that our form integration works well (via ngModelController)</span>
</span><span class='line'>        <span class="c1">// our directive instance is then put in the global &#39;elm&#39; variable for further tests</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">tpl</span><span class="p">)</span> <span class="nx">tpl</span> <span class="o">=</span> <span class="s1">&#39;&lt;div rn-stepper ng-model=&quot;testModel&quot;&gt;&lt;/div&gt;&lt;/form&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">tpl</span> <span class="o">=</span> <span class="s1">&#39;&lt;form name=&quot;form&quot;&gt;&#39;</span> <span class="o">+</span> <span class="nx">tpl</span> <span class="o">+</span> <span class="s1">&#39;&lt;/tpl&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// inject allows you to use AngularJS dependency injection</span>
</span><span class='line'>        <span class="c1">// to retrieve and use other services</span>
</span><span class='line'>        <span class="nx">inject</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$compile</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">form</span> <span class="o">=</span> <span class="nx">$compile</span><span class="p">(</span><span class="nx">tpl</span><span class="p">)(</span><span class="nx">scope</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">elm</span> <span class="o">=</span> <span class="nx">form</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>        <span class="c1">// $digest is necessary to finalize the directive generation</span>
</span><span class='line'>        <span class="nx">scope</span><span class="p">.</span><span class="nx">$digest</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;initialisation&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// before each test in this block, generates a fresh directive</span>
</span><span class='line'>        <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">compileDirective</span><span class="p">();</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>        <span class="c1">// a single test example, check the produced DOM</span>
</span><span class='line'>        <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should produce 2 buttons and a div&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">expect</span><span class="p">(</span><span class="nx">elm</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">expect</span><span class="p">(</span><span class="nx">elm</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>        <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should check validity on init&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">expect</span><span class="p">(</span><span class="nx">scope</span><span class="p">.</span><span class="nx">form</span><span class="p">.</span><span class="nx">$valid</span><span class="p">).</span><span class="nx">toBeTruthy</span><span class="p">();</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should update form validity initialy&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// test with a min attribute that is out of bounds</span>
</span><span class='line'>        <span class="c1">// first set the min value</span>
</span><span class='line'>        <span class="nx">scope</span><span class="p">.</span><span class="nx">testMin</span> <span class="o">=</span> <span class="mi">45</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// then produce our directive using it</span>
</span><span class='line'>        <span class="nx">compileDirective</span><span class="p">(</span><span class="s1">&#39;&lt;div rn-stepper min=&quot;testMin&quot; ng-model=&quot;testModel&quot;&gt;&lt;/div&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// this should impact the form validity</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">scope</span><span class="p">.</span><span class="nx">form</span><span class="p">.</span><span class="nx">$valid</span><span class="p">).</span><span class="nx">toBeFalsy</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;decrease button should be disabled when min reached&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// test the initial button status</span>
</span><span class='line'>        <span class="nx">compileDirective</span><span class="p">(</span><span class="s1">&#39;&lt;div rn-stepper min=&quot;40&quot; ng-model=&quot;testModel&quot;&gt;&lt;/div&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">elm</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;disabled&#39;</span><span class="p">)).</span><span class="nx">not</span><span class="p">.</span><span class="nx">toBeDefined</span><span class="p">();</span>
</span><span class='line'>        <span class="c1">// update the scope model value</span>
</span><span class='line'>        <span class="nx">scope</span><span class="p">.</span><span class="nx">testModel</span> <span class="o">=</span> <span class="mi">40</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// force model change propagation</span>
</span><span class='line'>        <span class="nx">scope</span><span class="p">.</span><span class="nx">$digest</span><span class="p">();</span>
</span><span class='line'>        <span class="c1">// validate it has updated the button status</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">elm</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;disabled&#39;</span><span class="p">)).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;disabled&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="c1">// and many others...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Some notes :</strong></p>

<ul>
<li>A directive needs to be compiled in a given scope to be tested</li>
<li>A non-isolated scope can be acceded via element.scope()</li>
<li>An isolated scope can be acceded via element.isolateScope()</li>
</ul>


<p><strong>Why to we have to call <code>scope.$digest()</code> when we change a model value in the tests ?</strong></p>

<p>In a real angular app, the <code>$digest</code> is automatically triggered by the framework in reaction to various events (clicks, inputs, requests&#8230;). There&#8217;s no such user-based events during the automated tests so we just need to force the <code>$digest</code>. (the <code>$digest</code> is what update all the bindings).</p>

<h2>Bonus #1: real time tests</h2>

<p>Thanks to grunt, we can make the tests run when the source changes and be alerted in real time.</p>

<p>If you want the tests to be run on each code change, just add a section to your <code>watch</code> task :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">js</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">files</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;src/*.js&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">tasks</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;karma:unit:run&#39;</span><span class="p">,</span> <span class="s1">&#39;build&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could update your default grunt task like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;karma:unit&#39;</span><span class="p">,</span> <span class="s1">&#39;connect&#39;</span><span class="p">,</span> <span class="s1">&#39;watch&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, just run <code>grunt</code> and you&#8217;ll get real-time tests and a builtin webserver :)</p>

<h2>Bonus #2: add code coverage reporting</h2>

<p>As developers, we love solid metrics; and we also love continous improvements. &#8220;coverage&#8221; refers to the code coverage of your test suite; It gives you metrics and detailed info to increase your code coverage without pain.</p>

<p>Here&#8217;s a sample coverage HTML report :</p>

<p><img class="center" src="http://blog.revolunet.com/images/coverage-example.png" width="600" height="283" title="AngularJS test coverage report example" ></p>

<p>We can see, for each folder and file, how much code is covered by our test suite. And this is updated in real-time thanks to grunt+karma integration. For each file, we can see line by line which blocks stays untested, which makes writing the remaining tests more straightforward.</p>

<p><strong>100% test coverage doesnt mean your code is bug-free, but it increase quality for sure !</strong></p>

<p>Its really easy to integrate this in our karma+grunt setup. Karma has a &#8220;plugin&#8221; system that allows you to plug the fantastic <a href="https://github.com/gotwarlost/istanbul">Istanbul code coverage tool</a> so we just need to configure the karma-unit.js file and we&#8217;re done :)</p>

<h4>Add coverage to karma</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># add the necessary node_modules</span>
</span><span class='line'>npm install karma-coverage --save-dev
</span></code></pre></td></tr></table></div></figure>


<p>now update the karma config file with these new settings :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// here we specify which of the files we want to appear in the coverage report</span>
</span><span class='line'><span class="nx">preprocessors</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;src/angular-stepper.js&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;coverage&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="c1">// add the coverage plugin</span>
</span><span class='line'><span class="nx">plugins</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;karma-jasmine&#39;</span><span class="p">,</span> <span class="s1">&#39;karma-firefox-launcher&#39;</span><span class="p">,</span> <span class="s1">&#39;karma-chrome-launcher&#39;</span><span class="p">,</span> <span class="s1">&#39;karma-coverage&#39;</span><span class="p">],</span>
</span><span class='line'><span class="c1">// add coverage to reporters</span>
</span><span class='line'><span class="nx">reporters</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;dots&#39;</span><span class="p">,</span> <span class="s1">&#39;coverage&#39;</span><span class="p">],</span>
</span><span class='line'><span class="c1">// tell karma how you want the coverage results</span>
</span><span class='line'><span class="nx">coverageReporter</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">type</span> <span class="o">:</span> <span class="s1">&#39;html&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// where to store the report</span>
</span><span class='line'>  <span class="nx">dir</span> <span class="o">:</span> <span class="s1">&#39;coverage/&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>More coverage config options here : <a href="https://github.com/karma-runner/karma-coverage">https://github.com/karma-runner/karma-coverage</a></p>

<p>You now need to run your tests again to generate your first report. It should be located in the project root &#8220;coverage&#8221; folder.</p>

<p><strong>Feel free to comment/ask below :)</strong></p>

<p>Next week, we&#8217;ll talk about distributing our now well tested directive on Github and Bower :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a reusable AngularJS input form component]]></title>
    <link href="http://blog.revolunet.com/blog/2013/11/28/create-resusable-angularjs-input-component/"/>
    <updated>2013-11-28T00:00:00+01:00</updated>
    <id>http://blog.revolunet.com/blog/2013/11/28/create-resusable-angularjs-input-component</id>
    <content type="html"><![CDATA[<p>One of the beauty of the AngularJS framework is its ability to isolate complexity with services and directives; This is perfect for segmenting our code, create very testable components, and make them reusable. A directive, which is an anticipation of the future <a href="http://css-tricks.com/modular-future-web-components/">web components</a>, is a piece of isolated javascript, HTML and CSS that encapsulate a specific behaviour and that you can easily reuse in various apps. Once created, a directive is simply invoked by adding it to the DOM via a HTML tag (<code>&lt;accordion&gt;&lt;/accordion&gt;</code>, or a custom attribute <code>&lt;div accordion&gt;&lt;/div&gt;</code>, or a CSS class <code>&lt;div class="accordion"&gt;&lt;/div&gt;</code> (and even as HTML comment).</p>

<p>In this tutorial we&#8217;ll go through the creation of a custom stepper directive that can be used as a reusable input component in your applications. We&#8217;ll cover the classic directive creation but also the input validation, and the use of the <a href="http://docs.angularjs.org/api/ng.directive:ngModel.NgModelController">ngModelController</a>, that will allow a seamless integration with any form, leveraging the existing AngularJS forms superpowers. The <a href="http://blog.revolunet.com/blog/2013/12/05/unit-testing-angularjs-directive">next part will cover the test suites with Jasmine and KarmaJS</a>, and the publication and distribution of our widget with GitHub and bower.</p>

<p>For this example we&#8217;ll build a custom numeric input widget, named &#8220;rn-stepper&#8221;. We&#8217;ll use the last AngularJS 1.2 that brings some important fixes to the private scopes management (capital point for reusable components). The full widget code is <a href="https://github.com/revolunet/angular-stepper">available on github</a> as a reusable component and you can see the final result here :</p>

<iframe style="width: 100%; height: 250px" src="http://jsfiddle.net/26ghx/embedded/result,js,html,css/light/"></iframe>


<br><br>


<h3>Markup generation</h3>

<p>The first step is to create a naïve directive that build our markup, and renders correctly. We just declare the directive name, and template to use.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// we declare a module name for our projet, and its dependencies (none)</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;revolunet.stepper&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'><span class="c1">// declare our naïve directive</span>
</span><span class='line'><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;rnStepper&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// can be used as attribute or element</span>
</span><span class='line'>        <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;AE&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="c1">// which markup this directive generates</span>
</span><span class='line'>        <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;button&gt;-&lt;/button&gt;&#39;</span> <span class="o">+</span>
</span><span class='line'>                  <span class="s1">&#39;&lt;div&gt;0&lt;/div&gt;&#39;</span> <span class="o">+</span>
</span><span class='line'>                  <span class="s1">&#39;&lt;button&gt;+&lt;/button&gt;&#39;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, to use our directive, its quite straightforward :</p>

<ul>
<li>declare our <code>revolunet.stepper</code> module as one of our app dependencies</li>
<li>use <code>&lt;div rn-stepper&gt;&lt;/div&gt;</code> (attribute form) or simply <code>&lt;rn-stepper&gt;&lt;/rn-stepper&gt;</code> (element form). to integrate the directive somewhere.</li>
</ul>


<p>The attribute form is better if you want to support IE8 as it works out-of-the-box.</p>

<p>demo : <a href="http://jsfiddle.net/revolunet/n4JHg">http://jsfiddle.net/revolunet/n4JHg/</a></p>

<h3>Add internal behaviour</h3>

<p>Now we need to add behaviour and internal variables to our custom component. We&#8217;ll declare a &#8220;private scope&#8221; that will hold internal variables and functions, and add the <code>link</code> function to our directive, which is responsible of initialising the component behaviour just after the markup has been inserted in the final page.</p>

<p>Here&#8217;s the updated directive code :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;rnStepper&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;AE&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="c1">// declare the directive scope as private (and empty)</span>
</span><span class='line'>        <span class="nx">scope</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>        <span class="c1">// add behaviour to our buttons and use a variable value</span>
</span><span class='line'>        <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;button ng-click=&quot;decrement()&quot;&gt;-&lt;/button&gt;&#39;</span> <span class="o">+</span>
</span><span class='line'>                  <span class="s1">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span> <span class="o">+</span>
</span><span class='line'>                  <span class="s1">&#39;&lt;button ng-click=&quot;increment()&quot;&gt;+&lt;/button&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="c1">// this function is called on each rn-stepper instance initialisation</span>
</span><span class='line'>        <span class="c1">// we just declare what we need in the above template</span>
</span><span class='line'>        <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">iElement</span><span class="p">,</span> <span class="nx">iAttrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">scope</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">scope</span><span class="p">.</span><span class="nx">increment</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">scope</span><span class="p">.</span><span class="nx">value</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">scope</span><span class="p">.</span><span class="nx">decrement</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">scope</span><span class="p">.</span><span class="nx">value</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We now have a functionnal component with an isolated code and template.</p>

<p>demo : <a href="http://jsfiddle.net/revolunet/A92Aw/">http://jsfiddle.net/revolunet/A92Aw/</a></p>

<h3>Communicate with the external world</h3>

<p>Our component works great but it would be more useful if it could control a real public variable, known as a <code>ngModel</code> in AngularJS.</p>

<p>Let&#8217;s add a databinding between our component internal <code>value</code> and the outer world (our application).</p>

<p>We just need to update our scope declaration like this :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">scope</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;=ngModel&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will automagically bind our internal <code>value</code> variable to the external one declared in the <code>ngModel</code> attribute. The <code>=</code> means &#8220;double data-binding&#8221; which means if ngModel is updated externally then the internal <code>value</code> will be updated, and vice-versa.</p>

<p>Say my app expose a <code>rating</code> variable, we could now bind it to our component simply like this :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">rn-stepper</span> <span class="na">ng-model=</span><span class="s">&quot;rating&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>demo : <a href="http://jsfiddle.net/revolunet/9e7Hy/">http://jsfiddle.net/revolunet/9e7Hy/</a></p>

<h3>Make our component form-friendly</h3>

<p>We now have a dynamic input that can manipulate arbitrary ngModel data. We need to modify a bit the code to make it play nice with the AngularJS forms. For example, AngularJS forms and input generally expose a <code>$pristine</code> and <code>$dirty</code> state which can be useful in many situation. To make the forms aware of our model changes from inside our component, we need to make use of the <code>ngModelController.$render</code> and <code>ngModelController.$setViewValue</code> API methods, which are available <strong>as soon as you &#8220;require&#8221; a ngModel</strong> on your directive.</p>

<p>The <code>ngModelController.$render</code> method is a method which you should override yourself in the directive and is responsible of updating the view; it will be called by the framework when the external ngModel changes. When the model changes, the framework executes the <code>$formatters</code> pipeline which is responsible of eventually converting the <code>$modelValue</code> raw value to a usable <code>$viewValue</code>.</p>

<p>For example, if your model is a real Date object, you&#8217;d want your input to display it as dd/mm/YY. The model-to-view conversion is made by the <code>$formatters</code> pipeline and the view-to-model by the <code>$parsers</code> pipeline. Once you get a ngModelController instance, you can easily insert new items in these pipelines.</p>

<p>The <code>ngModelController.$setViewValue</code> method should always be called when you want update a model from your directive (view). It takes care of calling the eventual <code>$parsers</code> pipeline. Then it applies the final value to the internal $modelValue, update the input $dirty state, update the optional parent form $dirty state and call any registered <code>$viewChangeListeners</code>. Here&#8217;s the <a href="https://github.com/angular/angular.js/blob/a090400f09d7993d102f527609879cdc74abae60/src/ng/directive/input.js#L1140-L1166">full code for this function</a>.</p>

<p>As pointed by a comment from <a href="http://twitter.com/@ThomasBelin4">@ThomasBelin4</a> below, we don&#8217;t need anymore to have a scope <code>value</code> variable, as we now have a reference to the original <code>ngModelController</code> which holds a reference to the viewValue.</p>

<p>Here&#8217;s how we update the directive declaration :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;rnStepper&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// restrict and template attributes are the same as before.</span>
</span><span class='line'>        <span class="c1">// we don&#39;t need anymore to bind the value to the external ngModel</span>
</span><span class='line'>        <span class="c1">// as we require its controller and thus can access it directly</span>
</span><span class='line'>        <span class="nx">scope</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>        <span class="c1">// the &#39;require&#39; property says we need a ngModel attribute in the declaration.</span>
</span><span class='line'>        <span class="c1">// this require makes a 4th argument available in the link function below</span>
</span><span class='line'>        <span class="nx">require</span><span class="o">:</span> <span class="s1">&#39;ngModel&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="c1">// the ngModelController attribute is an instance of an ngModelController</span>
</span><span class='line'>        <span class="c1">// for our current ngModel.</span>
</span><span class='line'>        <span class="c1">// if we had required multiple directives in the require attribute, this 4th</span>
</span><span class='line'>        <span class="c1">// argument would give us an array of controllers.</span>
</span><span class='line'>        <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">iElement</span><span class="p">,</span> <span class="nx">iAttrs</span><span class="p">,</span> <span class="nx">ngModelController</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// we can now use our ngModelController builtin methods</span>
</span><span class='line'>            <span class="c1">// that do the heavy-lifting for us</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// when model change, update our view (just update the div content)</span>
</span><span class='line'>            <span class="nx">ngModelController</span><span class="p">.</span><span class="nx">$render</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">iElement</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">ngModelController</span><span class="p">.</span><span class="nx">$viewValue</span><span class="p">);</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// update the model then the view</span>
</span><span class='line'>            <span class="kd">function</span> <span class="nx">updateModel</span><span class="p">(</span><span class="nx">offset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// call $parsers pipeline then update $modelValue</span>
</span><span class='line'>                <span class="nx">ngModelController</span><span class="p">.</span><span class="nx">$setViewValue</span><span class="p">(</span><span class="nx">ngModelController</span><span class="p">.</span><span class="nx">$viewValue</span> <span class="o">+</span> <span class="nx">offset</span><span class="p">);</span>
</span><span class='line'>                <span class="c1">// update the local view</span>
</span><span class='line'>                <span class="nx">ngModelController</span><span class="p">.</span><span class="nx">$render</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// update the value when user clicks the buttons</span>
</span><span class='line'>            <span class="nx">scope</span><span class="p">.</span><span class="nx">decrement</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">updateModel</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>            <span class="nx">scope</span><span class="p">.</span><span class="nx">increment</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">updateModel</span><span class="p">(</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>demo : <a href="http://jsfiddle.net/revolunet/s4gm6/">http://jsfiddle.net/revolunet/s4gm6/</a></p>

<h3>Add min/max attributes</h3>

<p>Now our component is form-friendly, so let&#8217;s as some builtin validation rules.</p>

<p>We could add optional min/max attributes to our component, which will handle the form validation by himself when they are present. These attributes will be data-bound so they can be updated at any time by the application (some other inputs in a form may impact the min/max here).</p>

<p>The <code>ngModelController</code> API gives us also a <code>$setValidity</code> method that can inform the parent forms about our component validity, and automatically add some handy CSS classes related to validity to out form and inputs.</p>

<p>We just need to call <code>ngModelController.$setValidity('outOfBounds', false)</code> to make our input, and thus parent forms invalids, and have <code>ng-invalid</code> and <code>ng-invalid-out-of-bound</code> CSS classes added to our forms and to our component.</p>

<p>Our stepper component is now full functionnal and integrates seamlessly in any form.</p>

<p>demo: <a href="http://jsfiddle.net/revolunet/HCUNC/">http://jsfiddle.net/revolunet/HCUNC/</a></p>

<h3>Prevent invalid input</h3>

<p>Another nice-to-have feature would be to prevent the user from entering invalid data, which means disabling the buttons when the internal value reach the min/max limits. This could be achieved in two ways :</p>

<ul>
<li>BAD :  manually in our link function, toggling our buttons states on each click.</li>
<li>GOOD : automagically, using a builtin <code>ng-disabled</code> directive in our template, that will disable the buttons under some conditions.</li>
</ul>


<p>The second option is much more Angular-ish and there are several ways to achieve this so let&#8217;s see how we can do.</p>

<p>We can add <code>ng-disabled="isOverMin()"</code> to our first button template and add a <code>scope.isOverMin</code> function that returns a boolean indicating if we should disable or not the given button. same with <code>overMax</code> that would check if the max has been reached or not.</p>

<p>Our template is now :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">ng-disabled=</span><span class="s">&quot;isOverMin()&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;decrement()&quot;</span><span class="nt">&gt;</span>-<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;div&gt;</span>{{ value }}<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">ng-disabled=</span><span class="s">&quot;isOverMax()&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;increment()&quot;</span><span class="nt">&gt;</span>+<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>demo : <a href="http://jsfiddle.net/revolunet/26ghx/">http://jsfiddle.net/revolunet/26ghx/</a></p>

<p>The <a href="http://blog.revolunet.com/blog/2013/12/05/unit-testing-angularjs-directive">next part will detail the tests suite</a> and distribution subjects over github and bower.</p>

<p>Stay tuned :) and feel free to comment/ask below !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Universal .htaccess CORS support]]></title>
    <link href="http://blog.revolunet.com/blog/2013/10/03/universal-CORS-htaccess/"/>
    <updated>2013-10-03T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/10/03/universal-CORS-htaccess</id>
    <content type="html"><![CDATA[<h2>What is CORS</h2>

<p>In the internet AJAX early days (~2000) browsers vendors implemented a strict cross-domain communication policy that prevented javascript on a given page to communicate with third party domains. Many workarounds have been implemented since, like JSONP, which is only a &#8216;hack&#8217; allowing cross-domain communication using javascirpt callbacks; Handy, but this prevents any other method than GET and forces the use of querystring to pass parameters.</p>

<p>With the RISE of internet APIs and decentralised services, having a way to communicate with 3rd party domain became critical; thus, the <a href="http://www.w3.org/TR/cors/">W3C defined the CORS</a> protocol, acronym which stands for &#8220;Cross-Origin Resource Sharing&#8221; and allows different domains to communicate together, the same way Adobe Flash did it a long time before with the crossdomain.xml policy (remember?).</p>

<p>Now with CORS, the server defines which domains (applications) can communicate with him (or anyone). When CORS is enabled on the server, your javascript can communicate transparently using any HTTP method; For non-GET requests, the browser transparently make an initial OPTIONS request to check if the request is allowed or not, and then makes the real request.</p>

<h2>CORS-enable your API</h2>

<p>You can find the whole specs and various implementations at <a href="http://enable-cors.org/">enable-cors.org</a>.</p>

<h2>Pain-free CORS for Apache servers</h2>

<p>If you don&#8217;t want to change your code, we&#8217;ve crafted a small .htaccess for you that will force CORS on your API, without even touching your code. Just drop one of the implementations in your .htaccess and your API is magically CORS-enabled :)</p>

<div><script src='https://gist.github.com/revolunet/6295643.js'></script>
<noscript><pre><code># with AJAX withCredentials=false (cookies NOT sent)
Header always set Access-Control-Allow-Origin &quot;*&quot;                   
Header always set Access-Control-Allow-Methods &quot;POST, GET, PUT, OPTIONS, PATCH, DELETE&quot; 
Header always set Access-Control-Allow-Headers &quot;X-Accept-Charset,X-Accept,Content-Type&quot;
RewriteEngine On                  
RewriteCond %{REQUEST_METHOD} OPTIONS 
RewriteRule ^(.*)$ $1 [R=200,L,E=HTTP_ORIGIN:%{HTTP:ORIGIN}]]

# with AJAX withCredentials=true (cookies sent, SSL allowed...)
SetEnvIfNoCase ORIGIN (.*) ORIGIN=$1
Header always set Access-Control-Allow-Methods &quot;POST, GET, PUT, OPTIONS, PATCH, DELETE&quot; 
Header always set Access-Control-Allow-Origin &quot;%{ORIGIN}e&quot;
Header always set Access-Control-Allow-Credentials &quot;true&quot;
Header always set Access-Control-Allow-Headers &quot;X-Accept-Charset,X-Accept,Content-Type&quot;
RewriteEngine On
RewriteCond %{REQUEST_METHOD} OPTIONS
RewriteRule ^(.*)$ $1 [R=200,L,E=HTTP_ORIGIN:%{HTTP:ORIGIN}]
</code></pre></noscript></div>


<p>Note: If you use the withCredentials version, be sure to add <code>withCredentials: true</code> in your AJAX requests.</p>

<p>You can validate your API CORS support using this demo : <a href="http://embed.plnkr.co/1E8ot9e1eVs23IrjzqKr/preview">http://embed.plnkr.co/1E8ot9e1eVs23IrjzqKr/preview</a></p>

<p>Hope this helps !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extending the Topcoat CSS framework]]></title>
    <link href="http://blog.revolunet.com/blog/2013/09/30/extending-topcoat-css-framework/"/>
    <updated>2013-09-30T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/09/30/extending-topcoat-css-framework</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p><a href="http://topcoat.io">Topcoat.io</a> is the new kid on the block of the CSS-only frameworks. It&#8217;s the first one that&#8217;s built for performance from the ground up, thanks to the constant performance tracking using Chrome telemetry, which makes it a tool of choice to build your mobile applications UI.It is also easy to theme and customize thanks to a smart CSS organisation and a powerful toolchain.</p>

<p>Topcoat has been built for the future, thanks to solid conventions and a cutting-edge javascript architecture, and more goodness :</p>

<ul>
<li><a href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/">BEM syntax</a> convention</li>
<li><a href="http://learnboost.github.io/stylus/">stylus</a> CSS preprocessor</li>
<li><a href="http://gruntjs.com">grunt</a> task automation</li>
<li><a href="https://github.com/topcoat/topdoc">TopDoc</a> CSS documentation generator</li>
<li><a href="http://npmjs.org">npm</a> for dependencies</li>
</ul>


<p>It&#8217;s fully open source, not &#8220;fauxpen source&#8221;, and the contributors uses various online tools to run the project :</p>

<ul>
<li><a href="http://github.com/topcoat">Github</a> of course for code and issues</li>
<li><a href="http://codepen.io/Topcoat">codepen.io</a> to prototype and host widgets demos</li>
<li><a href="http://huboard.com/topcoat/topcoat">huboard</a> to manage milestones on top of Github issues</li>
</ul>


<p>All of this make it a powerful framework made to be extensible and performant.</p>

<h2>Install Topcoat</h2>

<p>Just <a href="https://github.com/topcoat/topcoat/releases">download the latest release</a> from github and extract it. The release contains the final CSS with dark and light themes for desktop and mobile, so you can use then directly; just add a link to the <code>topcoat-mobile-light.min.css</code> file in your app for example.</p>

<p>If you want to customize the themes or add new components, you need to run <code>npm install</code> from the topcoat folder. This will download all the widgets sources and local dependencies to your <code>node_modules</code> folder.</p>

<p>Some important things to notice :</p>

<ul>
<li>Each component (button, list, checkbox&#8230;) has its own folder in the <code>node_modules</code> subfolder (so each one has its own npm repo). Each one also has its own gruntfile in case you want to build its css separately.</li>
<li>Most of components have a <code>topcoat-[COMPONENT]-base</code> folder with just enough CSS to completely reset the styling of the element, so other components can override it entirely. For example the default button hasn&#8217;t any default border or background and looks like a simple text block;</li>
<li>The <code>topcoat-theme</code> folder defines the 4 builtin Topcoat themes which are just a combination of variables that defines some variations of the components.</li>
<li>The main Gruntfile list the available themes and associated widgets using pattern globbing and this is from where the final CSS are built, including the given widgets.</li>
</ul>


<h2>Adding a custom theme</h2>

<p>You can easily tweak the builtin themes by modifying the variables inside the <code>topcoat-theme</code> folder then run <code>grunt</code> to rebuild the final CSS. But its much better to add your own theme and leave the others untouched.</p>

<p>Let&#8217;s add a simple green theme :</p>

<ul>
<li>copy the <code>topcoat-theme/src/theme-topcoat-*</code> file from the theme that matches the most your design, eg copy <code>theme-topcoat-mobile-light.styl</code> to <code>theme-green.styl</code>.</li>
<li>create a <code>variables-green.styl</code> with a bunch of variables that override the default ones (see the list of variables in the other variables-* files). For example :</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// base colors</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">color</span> <span class="o">=</span> <span class="err">#</span><span class="mi">00</span><span class="nx">b400</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">background</span><span class="o">-</span><span class="nx">color</span> <span class="o">=</span> <span class="err">#</span><span class="nx">e2ffe2</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">placeholder</span><span class="o">-</span><span class="nx">color</span><span class="o">--</span><span class="nx">input</span> <span class="o">=</span> <span class="err">#</span><span class="mi">4</span><span class="nx">eff4e</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">background</span><span class="o">-</span><span class="nx">color</span><span class="o">--</span><span class="nx">down</span> <span class="o">=</span> <span class="err">#</span><span class="mi">00</span><span class="nx">b400</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">background</span><span class="o">-</span><span class="nx">color</span><span class="o">--</span><span class="nx">hover</span> <span class="o">=</span> <span class="err">#</span><span class="mi">02</span><span class="nx">ff01</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">border</span><span class="o">--</span><span class="nx">focus</span> <span class="o">=</span> <span class="mi">1</span><span class="nx">px</span> <span class="nx">solid</span> <span class="err">#</span><span class="mi">00</span><span class="nx">b400</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">box</span><span class="o">-</span><span class="nx">shadow</span><span class="o">--</span><span class="nx">focus</span> <span class="o">=</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">2</span><span class="nx">px</span> <span class="err">#</span><span class="mi">00</span><span class="nx">b400</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// cta button colors</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">background</span><span class="o">-</span><span class="nx">color</span><span class="o">--</span><span class="nx">cta</span> <span class="o">=</span> <span class="err">#</span><span class="mi">00</span><span class="nx">b300</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">border</span><span class="o">--</span><span class="nx">cta</span> <span class="o">=</span> <span class="mi">1</span><span class="nx">px</span> <span class="nx">solid</span> <span class="err">#</span><span class="mi">006700</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">background</span><span class="o">-</span><span class="nx">color</span><span class="o">--</span><span class="nx">cta</span><span class="o">--</span><span class="nx">down</span> <span class="o">=</span> <span class="err">#</span><span class="mi">00</span><span class="nx">b400</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">background</span><span class="o">-</span><span class="nx">color</span><span class="o">--</span><span class="nx">cta</span><span class="o">--</span><span class="nx">hover</span> <span class="o">=</span> <span class="err">#</span><span class="mi">02</span><span class="nx">ff01</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>add <code>@import variables-green</code> to your <code>theme-green.styl</code>. (This allows you later to combine some variables files)</li>
<li>add the theme link in the main gruntfile, &#8216;stylus&#8217; section:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">stylus</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">green</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="kr">import</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;theme-green&#39;</span><span class="p">,</span> <span class="s1">&#39;utils&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">files</span><span class="o">:</span> <span class="p">[{</span>
</span><span class='line'>            <span class="nx">src</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="c1">// here you can eventually add/remove some components from the output</span>
</span><span class='line'>                <span class="s1">&#39;node_modules/topcoat-*/src/**/*.styl&#39;</span>
</span><span class='line'>                <span class="p">],</span>
</span><span class='line'>            <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;css/topcoat-green.css&#39;</span>
</span><span class='line'>        <span class="p">}]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Now run <code>grunt</code> and you&#8217;ll see your final <code>topcoat-green.css</code> and  <code>topcoat-green.min.css</code> appear magically in the CSS folder :)</li>
<li>You also have a <code>demo/topcoat-green.html</code> file for free that show you the final result, generated via TopDoc.</li>
</ul>


<h2>Add a custom component</h2>

<p>Now, let&#8217;s say you want to add a custom button to the generated theme, for example <code>button-round</code>.</p>

<p>Add a <code>node_modules/topcoat-button-round</code> folder and create <code>src/topcoat-button-round.styl</code> file. Inside, add your round button definition, with the documentation to generate the demo :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span> <span class="nt">import</span> <span class="nt">anything</span> <span class="nt">you</span> <span class="nt">need</span> <span class="nt">to</span> <span class="nt">extend</span>
</span><span class='line'><span class="k">@import</span> <span class="nt">topcoat-button</span>
</span><span class='line'><span class="c">/* topdoc</span>
</span><span class='line'><span class="c">  name: Round Button</span>
</span><span class='line'><span class="c">  description: A simple, yet round button</span>
</span><span class='line'><span class="c">  modifiers:</span>
</span><span class='line'><span class="c">    :active: Round button active state</span>
</span><span class='line'><span class="c">    :disabled: Disabled state</span>
</span><span class='line'><span class="c">    :hover: Hover state</span>
</span><span class='line'><span class="c">    :focus: Focused</span>
</span><span class='line'><span class="c">  markup:</span>
</span><span class='line'><span class="c">    &lt;button class=&quot;topcoat-button--round&quot;&gt;Button&lt;/button&gt;</span>
</span><span class='line'><span class="c">    &lt;button class=&quot;topcoat-button--round&quot; disabled&gt;Button&lt;/button&gt;</span>
</span><span class='line'><span class="c">  tags:</span>
</span><span class='line'><span class="c">    - desktop</span>
</span><span class='line'><span class="c">    - light</span>
</span><span class='line'><span class="c">    - mobile</span>
</span><span class='line'><span class="c">    - button</span>
</span><span class='line'><span class="c">    - round</span>
</span><span class='line'><span class="c">*/</span>
</span><span class='line'><span class="nc">.topcoat-button--round</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@extend</span> <span class="nc">.topcoat-button</span>
</span><span class='line'>    <span class="nt">border-radius</span><span class="o">:</span> <span class="nt">999px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.topcoat-button--round</span><span class="nd">:disabled</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">@</span><span class="n">extend</span> <span class="o">.</span><span class="n">topcoat</span><span class="o">-</span><span class="n">button</span><span class="o">:</span><span class="n">disabled</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.topcoat-button--round</span><span class="nd">:hover</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">@</span><span class="n">extend</span> <span class="o">.</span><span class="n">topcoat</span><span class="o">-</span><span class="n">button</span><span class="o">:</span><span class="n">hover</span>
</span><span class='line'>  <span class="k">text-shadow</span><span class="o">:</span> <span class="n">var</span><span class="o">-</span><span class="k">text-shadow</span><span class="p">;</span>
</span><span class='line'>  <span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="n">var</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.topcoat-button--round</span><span class="nd">:focus</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">@</span><span class="n">extend</span> <span class="o">.</span><span class="n">topcoat</span><span class="o">-</span><span class="n">button</span><span class="o">:</span><span class="n">focus</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.topcoat-button--round</span><span class="nd">:active</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="n">var</span><span class="o">-</span><span class="k">color</span><span class="p">;</span>
</span><span class='line'>    <span class="k">text-shadow</span><span class="o">:</span> <span class="n">var</span><span class="o">-</span><span class="k">text-shadow</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span> <span class="n">var</span><span class="o">-</span><span class="k">background-color</span><span class="o">--</span><span class="n">down</span><span class="p">;</span>
</span><span class='line'>    <span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="n">var</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">--</span><span class="n">down</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, when you&#8217;ll run <code>grunt</code> again, the final CSS will include your button definition and the <code>demo/topcoat-green.html</code> demo page will present your new button with related documentation.</p>

<h2>Creating new Topcoat components</h2>

<p>Now you know how to add custom components and integrate them in the Topcoat workflow properly.</p>

<p>If you&#8217;re willing to share new components with the community (and you should), here&#8217;s the workflow :</p>

<ul>
<li>demo your component markup and css on <a href="http://codepen.io">codepen.io</a></li>
<li>create a github repo for your component, using the same structure as any of the <code>node_modules/topcoat-*</code> folder.</li>
<li>if accepted, your component will be added to the main Topcoat <code>package.json</code> then auto-installed with <code>npm install</code>.</li>
</ul>


<h2>Need help ?</h2>

<p>Comment below, use Github issues or join the #topcoat irc channel to discuss :)</p>

<p><strong>I hope this quick intro will help you choose Topcoat as your next CSS framework and you will contribute to the project so we can build together a better CSS framework.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phonegap day Amsterdam 2013]]></title>
    <link href="http://blog.revolunet.com/blog/2013/09/24/phonegap-day-amsterdam/"/>
    <updated>2013-09-24T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/09/24/phonegap-day-amsterdam</id>
    <content type="html"><![CDATA[<p>Once again, i&#8217;ve been lucky enough to go to Amsterdam today to attend the Phonegap Europe annual conference.</p>

<p>The <a href="http://www.compagnietheater.nl/compagnietheater.html">venue</a> was great, the talks covered various subjects, and, most importantly, the atmosphere reflected a positive and healthy community : open-minded and confident in the open web as a major platform for the future of mobile applications.</p>

<p>Almost 2 years after Adobe took control of Nitobi (the team behind the Phonegap genesis), the Phonegap project is in a great shape, dynamic, more open than ever, and with a sane and solid codebase, powered by node.js and a modern javascript toolchain, thanks to the hard work of the core team and many contributors.</p>

<p>With the 3.0 version, released a few weeks ago, Phonegap is now mature and flexible enough to serve as a foundation for your various mobile projects. Every single plugin has been extracted from codebase, which is now focused on bridging performance and plugin management.</p>

<p><strong>Phonegap is the perfect example of how open source can increase code quality and grow a solid community while serving a company business.</strong></p>

<p>Here is a quick recap of the most notable talks.</p>

<h3>Distimo</h3>

<p>Distimo is an app-analytic company that analyses app downloads, conversions and profits and compute smart data for the app developers.</p>

<p>They shared some interesting metrics :</p>

<ul>
<li>33% of worlwide app revenues comes from Asia.</li>
<li>Globally, ~65% of revenues comes from the AppStore and ~35% from Play Store (growing fast).</li>
<li>Candy Crush saga makes as much money in Asia on both iOS or Android</li>
<li>Games of course dominates stores revenues</li>
</ul>


<p>More data at : <a href="http://www.distimo.com/publications">http://www.distimo.com/publications</a></p>

<h3>Untappd</h3>

<p>Demo of one of the most successfull Phonegap apps : Untappd, a beautiful beer-centered social network app with 700k users and 4 stars rating. <a href="https://untappd.com/">Join now !</a></p>

<h3>Blackberry loves the web</h3>

<p>Too late maybe ?</p>

<h3>Native UI in Phonegap Apps</h3>

<p>Tanaka Masahiro demoed the <a href="https://github.com/monaca/monaca-framework-ios">Monaca hybrid framework</a> which gives you the ability to add native UI elements to your Phonegap app. You can wrap the phonegap webview with native tabbar/navigation bar to improve your UX, specially revelant on older Android devices. The framework also allows native transitions between various webviews, but this breaks application state. The framework hasn&#8217;t yet migrated to phonegap 3.0 so not usable as is IMHO.</p>

<p>Interesting real hybrid approach that demonstrates again that Phonegap is not necessarly a &#8220;full web&#8221; solution, but you can use as much &#8220;native&#8221; stuff as needed.</p>

<h3>Apple phonegap apps rejection prevention</h3>

<p><a href="https://twitter.com/rdlauer">Rob Lauer</a> from <a href="http://www.kendoui.com/">kendoui</a> shared his experiences about mobile web apps rejection reasons on the Apple Store.</p>

<p>Here&#8217;s a bunch of common best practices to prevent your Phonegap app to be rejected :</p>

<ul>
<li>Make an app, not a website</li>
<li>Create unique and useful apps</li>
<li>Don&#8217;t use annoying ads</li>
<li>User registration shouldn&#8217;t be mandatory (at least a free demo access)</li>
<li>Don&#8217;t force users to validate CGU</li>
<li>Never tag your app version lower to 1.0</li>
<li>Should work offline with minimal features</li>
<li>Don&#8217;t load remote code that change your app behaviour</li>
<li>Use beautiful, homogenous icons</li>
<li>Write accurate app description</li>
<li>Don&#8217;t try to steal Apple money, use in-app payments or die instantly</li>
</ul>


<h3>Topcoat.io</h3>

<p>Kristofer Joseph, original <a href="http://topcoat.io">TopCoat</a> author, talked about this beautiful and slick CSS framework focused on performance and themability.</p>

<p>TopCoat.io provides various widgets as pure HTML/CSS and, most importantly, provides the best technical stack ever to extend it cleanly :</p>

<ul>
<li><a href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/">BEM CSS syntax</a> convention</li>
<li><a href="http://gruntjs.com">grunt</a>-based automation</li>
<li><a href="npmjs.org">npm</a> dependencies management</li>
<li><a href="https://github.com/topcoat/topdoc">TopDoc</a> documentation generator</li>
<li><a href="http://www.chromium.org/developers/telemetry">chrome telemetry</a>  performance analysis</li>
<li><a href="codepen.io">codepen.io</a> as a prototyping tool</li>
<li>What else ??</li>
</ul>


<p>Another great example of a successful project, open-sourced from day one and following the best practices from the ground up.</p>

<p>TopCoat is definitely shaped for the future and you can already use it in your Phonegap projects !</p>

<p>Check out <a href="https://twitter.com/devgirlfl">@devgirlfl</a> article &amp; demo : <a href="http://devgirl.org/2013/08/29/totally-rad-topcoat/">http://devgirl.org/2013/08/29/totally-rad-topcoat</a></p>

<h3>WizCorp HTML5 gaming</h3>

<p>Yes you can build great games with Phonegap. You don&#8217;t necessarly draw directly inside the webview, but as phonegap is very open and extensible, you can easily plug native features as needed, like <a href="http://impactjs.com/ejecta">Ejecta</a> (off browser canvas+audio for iOS), webGL views&#8230; WizCorp team shares some interesting code <a href="https://github.com/Wizcorp">on their github</a>, like a native spinner, navigation views helper&#8230;</p>

<h3>Chrome Cordova plugins</h3>

<p>This may be the biggest announce of this event : We can now use Chrome APIs right in our cordova applications. For the moment, we just have socket, storage, notifications, and identity (oauth), but in a near future, we&#8217;ll see support for syncFileSystem (synced data across devices) and more.</p>

<p>Basically, this means that you can code a Chrome Packaged App using only chrome APIs, then distribute it on desktop via the chrome store and then on mobile app stores using cordova !</p>

<p>This is very early stage but Google puts some efforts to stabilize and extend capabilities quickly.</p>

<p>All Chrome javascript APIs : <a href="http://developer.chrome.com/apps/api_index.html">http://developer.chrome.com/apps/api_index.html</a></p>

<p>Cordova implemented APIs can be found at : <a href="http://plugins.cordova.io">http://plugins.cordova.io</a></p>

<h3>Testing with appium.io</h3>

<p><a href="http://twitter.com/filmaj">Fil Maj</a> demonstrated <a href="http://appium.io">appium</a>, an open source end-to-end testing platform that fully support phonegap applications. You can write automation scripts (think selenium) then run them on your own devices, or use appium infrastructure to run the tests on various devices and produces detailed reported.</p>

<p>In a world of such devices fragmentation, this can be very useful :)</p>

<h3>Firefox OS</h3>

<p>Phonegap now also support Firefox OS ;) and Firefox provides many more javascript APIs, like &#8216;Activites&#8217; (think Web intents). If you support the real open web, Mozilla is definitely the way to go :)</p>

<h3>Phonegap CLI</h3>

<p>This awesome talk by <a href="twitter.com/mwbrooks">Michael Brooks</a> was the most interesting and technical talk of the day. Michael showed us how powerful the cordova and phonegap CLI are. Based on a cutting edge javascript architecture, the phonegap CLI is made of nodes modules that you can use directly in the CLI, or as external nodeJS modules, which allows you to integrate the whole workflow in third-party tools and vice-versa. open source power :)</p>

<p>He also demonstrated how easy it is to create and compile apps with or without the locally installed SDKs, using phonegap build as a fallback. Just run for example <code>phonegap compile ios</code> from your machine, then in seconds you get back a QRcode that you can scan to test your final app on a real device instantly; neat !</p>

<h4>Finally, a big thanks to <a href="https://twitter.com/colene">Colene</a>, <a href="https://twitter.com/ppk">Peter Paul Koch</a> and all the Phonegap team for this event, can&#8217;t wait for next year :)</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[npm vs pip]]></title>
    <link href="http://blog.revolunet.com/blog/2013/09/18/npm-vs-pip/"/>
    <updated>2013-09-18T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/09/18/npm-vs-pip</id>
    <content type="html"><![CDATA[<p>After my morning <a href="https://twitter.com/revolunet/status/380210846578016256">twitter rant</a> about <code>npm install &gt; pip install</code> i need to add some clarifications and explain why i meant. Basically i meant that npm is much easier to use from a user perspective, which is an essential point to grow a community. Package management and dependencies is an important part of modern application development workflow and thus needs high consideration.</p>

<p><a href="https://npmjs.org/">npm</a> (node packaged modules) was released at end of 2011 and for sure it&#8217;s inspired from many other packages manager while removing their commons hassles. Also, its used both on backend and on frontend projects (eg: AngularJS+grunt).</p>

<p>Some of the <a href="http://www.pip-installer.org/en/latest/">pip</a> hassles are :</p>

<ul>
<li>you need to install virtualenv separately</li>
<li>you need to configure it and run cryptic commands to activate virtualenvs</li>
<li>you can install virtualenvwrapper to make thing easier though</li>
<li>you still need to configure it though</li>
<li>a fresh <code>pip install</code> in a project containing the standard requirements.txt does nothing</li>
</ul>


<p>On the other side, npm is a no-brainer to use :</p>

<ul>
<li><code>npm install</code> installs/upgrades any project dependencies</li>
<li>there&#8217;s no notion of virtualenv, it just uses what you have in the current <code>node_modules</code> folder or in your global install.</li>
</ul>


<p>Both are for sure very powerful tools that goes far beyond this basic usage but this is daily work for the developer and also the first contact when entering a new project so it should work seamlessly.</p>

<p>Please correct me if i&#8217;m wrong :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS tips'n'tricks part 2]]></title>
    <link href="http://blog.revolunet.com/blog/2013/07/23/angularjs-tips-n-tricks-2/"/>
    <updated>2013-07-23T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/07/23/angularjs-tips-n-tricks-2</id>
    <content type="html"><![CDATA[<p>Here&#8217;s a new batch of AngularJS tips and gotchas; If you didn&#8217;t read it yet, you can check the <a href="http://blog.revolunet.com/blog/2013/05/01/angular-tips-n-tricks/">part 1</a> and feel free to comment below :)</p>

<h3>Access an element scope from outside</h3>

<p>This is useful for debugging: in your Chrome console, highlight a node in the Elements tab, then, in the console, to check its scope :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">element</span><span class="p">(</span><span class="nx">$0</span><span class="p">).</span><span class="nx">scope</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>or even :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">element</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;elementId&#39;</span><span class="p">)).</span><span class="nx">scope</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?utm_source=chrome-ntp-icon">Batarang Chrome Extension</a> is much powerful and let you inspect any scope, anywhere :)</p>

<h3>Unwatch an expression</h3>

<p>Sometimes you want to watch an expression only a few times, and then forget it. The <code>$watch</code> function returns a callback just for that. You just have to execute it back to destruct the watcher.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">watcher</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;data.counter&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">iElement</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;width&#39;</span><span class="p">,</span> <span class="mi">50</span> <span class="o">*</span> <span class="nx">newValue</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">newValue</span> <span class="o">&gt;=</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// autodestruction when data.counter reaches 10</span>
</span><span class='line'>        <span class="nx">watcher</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Group elements in a select</h3>

<p>If you play with selects, the <code>ng-options</code> directive is <a href="http://docs.angularjs.org/api/ng.directive:select">quite powerful</a> and <a href="http://odetocode.com/blogs/scott/archive/2013/06/19/using-ngoptions-in-angularjs.aspx">has many syntaxes</a>.</p>

<p>For example you can easily group a model by attribute to have a nested select menu :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;select</span> <span class="na">ng-options=</span><span class="s">&quot;distrib.version group by distrib.name for distrib in distribs&quot;</span><span class="nt">&gt;&lt;/select&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, just add an <code>ng-model</code> directive to your select to data-bind it to one of the values.</p>

<h3>Filter falsy values</h3>

<p>You can&#8217;t use the builtin filter for falsy attributes or values :/ I don&#8217;t know if this is a bug of feature, but a simple workaround is to use a custom filter function that you can expose on the scope. (you can also define your own filter).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">testValues</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">42</span><span class="p">];</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">isFalsy</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">!</span><span class="nx">val</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{ testValues|filter:true }}        //  [true]
</span><span class='line'>{{ testValues|filter:5 }}           //  [5]
</span><span class='line'>{{ testValues|filter:0 }}           //  [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, false, true, 0, -1, 5, 42]
</span><span class='line'>{{ testValues|filter:false }}       //  [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, false, true, 0, -1, 5, 42]
</span><span class='line'>{{ testValues|filter:isFalsy }}     //  [false, 0]
</span></code></pre></td></tr></table></div></figure>


<h3>Filter on objects</h3>

<p>The builtin filter function is <a href="http://code.angularjs.org/1.1.5/docs/api/ng.filter:filter">quite powerful</a> and allows you to filter a list of objects on given properties only, or on everything, exactly or not, negated or not, etc&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{ games|filter:&#39;street&#39; }}                       //  all games containing &quot;street&quot; in any property
</span><span class='line'>{{ games|filter:&#39;!street&#39; }}                      //  all games NOT containing &quot;street&quot; in any property
</span><span class='line'>{{ games|filter:{name:&#39;street&#39;} }}                //  all games containing &quot;street&quot; in their name
</span><span class='line'>{{ games|filter:{name:&#39;street&#39;}:true }}           //  all games named exactly &quot;street&quot;
</span><span class='line'>{{ games|filter:{name:&#39;street&#39;, device:&#39;PS3&#39;} }}  //  all games containing &quot;street&quot; in their name and PS3 in their device
</span></code></pre></td></tr></table></div></figure>


<h3>ng-repeat with duplicate items</h3>

<p>If for some reason you need to have duplicate items in your <code>ng-repeat</code> you can extend your <code>ng-repeat</code> expression with <code>track by $index</code> and it works :)</p>

<h3>Directive : parse attribute without watching it</h3>

<p>In one of your directive, if you need to have a read-only access to an attribute model, but without the automatic watch/binding, you can simply use <code>&amp;</code> instead of <code>=</code> when declaring the binding in the scope. You&#8217;ll then be able to access the model value . (this may break in future releases). This is a shortcut for using the <code>$parse</code> service on the current scope.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;rnCounter&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">scope</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">count</span><span class="o">:</span> <span class="s1">&#39;&amp;rnCounter&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">iElement</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">iElement</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">scope</span><span class="p">.</span><span class="nx">count</span><span class="p">());</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Data-binding to a boolean</h3>

<p>You can bind to a boolean value, but you <strong>can&#8217;t</strong> update that value from your directive.</p>

<p>This won&#8217;t work :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">rn-zippy</span> <span class="na">status=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;rnZippy&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;A&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">scope</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">status</span><span class="o">:</span> <span class="s1">&#39;=?&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">iElement</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">function</span> <span class="nx">toggle</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">scope</span><span class="p">.</span><span class="nx">status</span> <span class="o">=</span> <span class="o">!</span><span class="nx">scope</span><span class="p">.</span><span class="nx">status</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">iElement</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">toggle</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>You need to use a real model, OR, initialise a new one and use it as your model instead :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">rn-zippy</span> <span class="na">ng-init=</span><span class="s">&quot;status=true&quot;</span> <span class="na">status=</span><span class="s">&quot;status&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Includes onload</h3>

<p>You can trigger a callback when your <code>ng-include</code> partial is loaded :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-inlude=</span><span class="s">&quot;&#39;partials/&#39; + page + &#39;.html&#39;&quot;</span> <span class="na">onload=</span><span class="s">&quot;callback()&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the <code>ngView</code>, you need to listen to the <code>$viewContentLoaded</code> event.</p>

<h3>Express testing</h3>

<p>You know you should write serious tests suites ? There&#8217;s everything to help you in AngularJS with Karma test runner + Jasmine.</p>

<p>Once you have many tests, they can take some time to execute and there&#8217;s a little trick to speed you up : you can limit the test-runner to a given test group by using <code>ddescribe</code> instead of <code>describe</code> and to a single test with <code>iit</code> instead of <code>it</code>.</p>

<p>That&#8217;s awesome to focus on specific tests for a while.</p>

<h3>Service decorators</h3>

<p>You can easily decorate and modify any existing service or directive. That&#8217;s how the <code>ngMobile</code> overrides the <code>ngClick</code> directive to handle transparently the FastClick behaviour.</p>

<p>Here&#8217;s an exemple that overrides the <code>$sniffer</code> service and fix the animation detection for older androids devices (landed in <a href="https://github.com/angular/angular.js/commit/ef5bc6c">ef5bc6c</a>) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">&#39;$provide&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$provide</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$provide</span><span class="p">.</span><span class="nx">decorator</span><span class="p">(</span><span class="s1">&#39;$sniffer&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$delegate&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$delegate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">$delegate</span><span class="p">.</span><span class="nx">transitions</span><span class="o">||!</span><span class="nx">$delegate</span><span class="p">.</span><span class="nx">animations</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$delegate</span><span class="p">.</span><span class="nx">transitions</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">webkitTransition</span><span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">$delegate</span><span class="p">.</span><span class="nx">animations</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">webkitAnimation</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$delegate</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}]);</span>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s all for today, feel free to ask and comment below :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn AngularJS in 5 steps]]></title>
    <link href="http://blog.revolunet.com/blog/2013/06/01/starting-with-angularjs/"/>
    <updated>2013-06-01T02:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/06/01/starting-with-angularjs</id>
    <content type="html"><![CDATA[<p>I&#8217;ve seen some developers quite shy about AngularJS when confronted to all the magical powers; don&#8217;t be afraid, AngularJS indeed introduces several new concepts but you can get them in just a few weeks of practice&#8230; The Google team is working hard to lower the Angular entry barrier and to make everything as simple as possible for developers.</p>

<p><strong>AngularJS is a new disruptive innovation in the Javascript frameworks world and it prefigures the future of web browsers : templates, data-binding, web components&#8230;</strong></p>

<p>In this post i&#8217;ll give some advices for the AngularJS newbies and share with you the best pointers to learn and understand the core concepts quickly.</p>

<p>First, to understand AngularJS you of course need to know a bit of Javascript. If you&#8217;re not comfortable enough yet, pick a free book on <a href="http://jsbooks.revolunet.com">JSbooks</a> and <a href="http://www.codecademy.com/tracks/javascript">practice</a>.</p>

<p>If you have a jQuery background, you absolutely need to read this in-depth Stack Overflow answer : <a href="http://stackoverflow.com/questions/14994391/how-do-i-think-in-angularjs-if-i-have-a-jquery-background/15012542#15012542">How to think in AngularJS if i have a jQuery background</a>. Just imagine the productivity boost you&#8217;ll get when you won&#8217;t need to maintain the DOM anymore :)</p>

<h3>To sum up key features of AngularJS :</h3>

<ul>
<li><strong>Templates</strong> : Your templates lives right in the DOM. Forget mustache, handlebars, hogan&#8230;</li>
<li><strong>Two-way data-binding</strong> : Your javascript data automagically updates your DOM and vice-versa.</li>
<li><strong>Routing</strong> : Define routes, associate templates and controller in just a few lines.</li>
<li><strong>Forms</strong> : Many helpers to help dealing with forms, one of the worst webdevs nightmare.</li>
<li><strong>Directives</strong> : Encapsulates templates and code in reusable components easily.</li>
<li><strong>Testability</strong> : AngularJS was designed in a way your web app can be fully testable.</li>
<li><strong>Animation</strong> : Easily animate elements and views.</li>
</ul>


<h3>Here are 5 steps to boost your AngularJS skills right now :</h3>

<ol>
<li>follow the <a href="http://docs.angularjs.org/tutorial">official tutorial</a> and the <a href="http://docs.angularjs.org/guide">dev guide</a>.</li>
<li>watch the awesome <a href="http://egghead.io">egghead.io video series</a>. they&#8217;re 3mins each only :)</li>
<li>watch the <a href="http://www.youtube.com/watch?v=i9MHigUZKEM">60mins AngularJS fundamentals video</a></li>
<li>read the code of <a href="http://todomvc.com/architecture-examples/angularjs">some</a> <a href="https://github.com/petebacondarwin/foodme">great</a> <a href="https://github.com/angular-app/angular-app">AngularJS</a> <a href="https://github.com/vojtajina/task-manager">app</a> <a href="https://github.com/IgorMinar/Memory-Game">examples</a>.</li>
<li>read as many times as needed the <a href="http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs">nuances of scope prototypal inheritance</a></li>
</ol>


<p>Of course, dont just watch/read, you need to experiment every step :)</p>

<p>After that, you should have a pretty good understanding of the framework and be able to <strong>angularize all the things</strong> :)</p>

<p><strong>Need help ?</strong> Ask your questions in the comments below, or on IRC #angularjs channel, or on <a href="https://groups.google.com/forum/?fromgroups#!forum/angular">the dedicated google group</a>.</p>

<p>BTW, if you read French, great ressources here : <a href="http://www.frangular.com">frangular.com</a> and <a href="http://lauterry.github.io/slides-prez-angular">Thierry Lau&#8217;s introduction slides</a>.</p>

<p>Need more ressources ?</p>

<ul>
<li>Read the Angular source itself : <a href="https://github.com/angular/angular.js">github.com/angular/angular.js</a></li>
<li><a href="https://github.com/jmcunningham/AngularJS-Learning">A huge list of good AngularJS ressources</a> maintained by the community</li>
<li><a href="https://gist.github.com/revolunet/4657146">My AngularJS ressources compilation</a></li>
<li><a href="https://github.com/angular/angular.js/wiki/JSFiddle-Examples">Lots of JSfiddle examples in the AngularJS wiki</a></li>
<li><a href="http://stackoverflow.com/questions/tagged/angularjs">Stack overflow answers</a></li>
<li><a href="https://speakerdeck.com/search?q=angularjs">Speackerdeck prezos</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GoogleIO 2013 keynote recap]]></title>
    <link href="http://blog.revolunet.com/blog/2013/05/15/google-io-2013-keynote/"/>
    <updated>2013-05-15T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/05/15/google-io-2013-keynote</id>
    <content type="html"><![CDATA[<p>So today was the opening of the 2013 GoogleIO developer conference in San Francisco and the Googlers announced a <strong>insanely crazy</strong> amount of new projects/services/features in just the first few hours, which is very exciting for every web/android developer. The next three days will be very busy, with a lot of focus on Chrome, Android and Google+.</p>

<p>Though, we don&#8217;t have new Nexus devices, no Android 4.3, and no Javascript AppEngine runtime. So huge fail on my <a href="https://twitter.com/revolunet/status/333620420798472192">previous predictions</a>.</p>

<p>The keynote started with a big fail demo effect happened in the very first demo about Android multiplayer gaming when demoing a new Google Cloud Messaging feature, quite embarassing, but then everything ran smoothly.</p>

<p>Here&#8217;s a little recap of the most important things announced just during the 3 hours keynote :</p>

<h2><a href="http://officialandroid.blogspot.fr/2013/05/androidio-just-press-play.html">Android</a></h2>

<ul>
<li>Google cloud messaging : can now be used in a bidirectionnal way, and apps can now also store data in the cloud and sync it across devices (scores, leaderboards&#8230;).</li>
<li>Google Game Services platform to help game developers with new APIs</li>
<li>Samsung Galaxy S4 will be available in June on Google Play with standard Android build and unlocked bootloader ! 649$ though but without that ugly, messy, shitty Samsung overlay.</li>
<li><a href="http://www.youtube.com/watch?v=e0fXuyL0xVU">Android studio</a> to replace Eclipse nightmare, finally ! good move !</li>
<li>Unified and synced notifications between devices.</li>
<li>Translation service for apps, better analytics&#8230;</li>
<li>Enhanced maps API</li>
</ul>


<h2><a href="http://play.google.com/about/music/">Google Music</a></h2>

<ul>
<li>Access to all the music for 9.99$/month</li>
<li>Discover to new recommended songs with google suggestions</li>
<li>Google powered radio feature based on what you like</li>
</ul>


<h2><a href="https://plus.google.com/+chrome/posts">Chrome / Web</a></h2>

<ul>
<li>750 millions active chrome users globally</li>
<li>WebP and VP9 royalty-free compression standards for images and videos to increase speed specially on mobile devices.</li>
<li>Google provides a free (deactivable) proxy for Android to improve speed based on this codecs.</li>
<li>New payment autocomplete API will help process payments quickly on websites, specially useful on mobile (2 clicks payments)</li>
<li>Google will finally release a rock solid UI framework based on web components standards : <a href="http://www.polymer-project.org">polymer-project.org</a> . I wonder how it will fit with AngularJS.</li>
<li>V8 will integrate asm.js to improve Javascript performance.</li>
</ul>


<h2><a href="http://googleplusproject.blogspot.fr/2013/05/new-google-stream-hangouts-and-photos.html">Google +</a></h2>

<ul>
<li>New interface :)</li>
<li>Better Hangouts</li>
<li>Unified notifications across devices</li>
<li>Better pictures management, event an &#8216;auto awesome&#8217; mode :)</li>
</ul>


<h2><a href="http://google-latlong.blogspot.fr/2013/05/meet-new-google-maps-map-for-every.html">Maps</a></h2>

<ul>
<li>iPad version this summer</li>
<li>Brand new Google maps, with new design, more space for content, and builtin 3D thanks to WebGL</li>
</ul>


<h2>Gmail</h2>

<ul>
<li>You can now <a href="http://googlecommerce.blogspot.fr/2013/05/send-money-to-friends-with-gmail-and.html">send money to your friends right from Gmail with google wallet</a> :)</li>
<li>Developers can now <a href="http://googleappsdeveloper.blogspot.fr/2013/05/introducing-actions-in-inbox-powered-by.html">add actions to their email</a></li>
</ul>


<h2>In other news</h2>

<ul>
<li>For some reasons (<a href="https://code.google.com/p/googleappengine/issues/list">top requested features</a>), <a href="https://gaeforphp.appspot.com">Google choosed PHP over Javascript as a new AppEngine runtime</a>. <strong>#WTF</strong></li>
<li>Google Play for education allows teachers/schools to push content directly to students devices</li>
<li>Google TVs will be <a href="https://plus.google.com/+GoogleTVDevelopers/posts/X5rmq6Yu8xG">updated to Android 4.2 and latest chrome</a> !</li>
</ul>


<p>Anything missed ?</p>

<p>You can still watch the full keynote <a href="http://www.youtube.com/watch?v=lLPue2vK3wg">on Youtube</a> of course.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making of the angular-carousel]]></title>
    <link href="http://blog.revolunet.com/blog/2013/05/02/angular-carousel-making-of/"/>
    <updated>2013-05-02T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/05/02/angular-carousel-making-of</id>
    <content type="html"><![CDATA[<p>Our first real life experiment with AngularJS is a mobile and touch-friendly carousel directive.</p>

<p>As this project shed some lights on various AngularJS aspects, we&#8217;d like to share it with you;
The full demo+code is available here : <a href="http://blog.revolunet.com/angular-carousel">http://blog.revolunet.com/angular-carousel</a></p>

<p>The goal is to transform any <code>ng-repeat</code> directive into a carousel, just by adding the <code>rn-carousel</code> attribute to its <code>ul</code> container. The directive take care of the dirty work for you, without any jQuery.</p>

<p>Here&#8217;s a very basic example of a Youtube API call, with the data displayed in a regular Angular template; We just add a <code>rn-carousel</code> attribute to the <code>ul</code> element to ask a carousel :)</p>

<iframe style="width: 100%; height: 330px" src="http://jsfiddle.net/3QBEE/embedded/result,html,js,css/light/"></iframe>


<br><br>


<p>This <code>rn-carousel</code> directive is responsible of :</p>

<p><strong>1) wrapping the real ul/li in a carousel container and add CSS classes</strong></p>

<p>We first wrap the original <code>ul</code> block in an outer div using JQlite <code>wraps</code> method during the directive link phase. This cannot be doneduring the compile phase as it would lead to an infinite recursion loop. (AngularJS will wrap again an again as the original directive stays untouched).</p>

<p>Then we add some CSS classes and an unique carousel identifier class so we can target that instance easily later.</p>

<p>The CSS makes the ul/li block appears as a single horizontal line composed of many li blocks, so its very easy to slide the blocks horizontally.</p>

<p><strong>2) watching the ng-repeat expression</strong></p>

<p>Because we want to monitor precisely the items in our carousel, and we want to be able to dynamically add/remove items, we need to extract and watch the original <code>ng-repeat</code> expression. We can then watch that expression and then be notified when its updated. This is useful to know how many slides we have and update our indicators accordingly for example.</p>

<p><del>This extraction is done by literally parsing the ng-repeat expression in a generic way, using the generated normalized comment node. <a href="http://www.bennadel.com/blog/2457-Accessing-scope-On-The-DOM-Using-AngularJS.htm">Credits goes to @bennadel</a> for this awesome trick</del>.</p>

<p><strong>Update :</strong> I ended up with just extracting the li <code>ng-repeat</code> attribute during the <code>compile</code> phase which is much less overhead.</p>

<p><strong>3) binding touch and click events</strong></p>

<p>Like most directives, we bind events in the linking phase. We just take care of binding both touch and mouse events.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// bind events</span>
</span><span class='line'><span class="nx">container</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;mousedown touchstart&#39;</span><span class="p">,</span> <span class="nx">swipeStart</span><span class="p">);</span>
</span><span class='line'><span class="nx">container</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;mousemove touchmove&#39;</span><span class="p">,</span> <span class="nx">swipe</span><span class="p">);</span>
</span><span class='line'><span class="nx">container</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;mouseup touchend&#39;</span><span class="p">,</span> <span class="nx">swipeEnd</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>4) animating the slides smoothly</strong></p>

<p>When we detect a <code>touchstart</code> we just store the initial event position. On <code>touchemove</code> we update the horizontal offset and move the whole <code>ul</code> accordingly using CSS. Then on <code>touchend</code>, we detect the desired position (prev or next) and dynamically add CSS styles and classes to move the slides accordingly, or restore the current position in some cases.</p>

<p>The slide movement is made thanks to the CSS <code>transition</code> and <code>translate3d</code> properties to force CSS 3D transforms and thus animate the slides using the GPU which make the movement much more smooth especially on mobile devices.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// the offset value is simply : desiredSlideIndex * slideWidth</span>
</span><span class='line'><span class="nx">carousel</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span>
</span><span class='line'>    <span class="s1">&#39;-webkit-transform&#39;</span><span class="o">:</span> <span class="s1">&#39;translate3d(&#39;</span> <span class="o">+</span> <span class="nx">offset</span> <span class="o">+</span> <span class="s1">&#39;px,0,0)&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;-moz-transform&#39;</span><span class="o">:</span> <span class="s1">&#39;translate3d(&#39;</span> <span class="o">+</span> <span class="nx">offset</span> <span class="o">+</span> <span class="s1">&#39;px,0,0)&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;-ms-transform&#39;</span><span class="o">:</span> <span class="s1">&#39;translate3d(&#39;</span> <span class="o">+</span> <span class="nx">offset</span> <span class="o">+</span> <span class="s1">&#39;px,0,0)&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;-o-transform&#39;</span><span class="o">:</span> <span class="s1">&#39;translate3d(&#39;</span> <span class="o">+</span> <span class="nx">offset</span> <span class="o">+</span> <span class="s1">&#39;px,0,0)&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;transform&#39;</span><span class="o">:</span> <span class="s1">&#39;translate3d(&#39;</span> <span class="o">+</span> <span class="nx">offset</span> <span class="o">+</span> <span class="s1">&#39;px,0,0)&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>5) adding an indicator to our carousel</strong></p>

<p>As we already watch the <code>ng-repeat</code> expression, we track the number of slides in the carousel and so its quite easy to add data-bound indicators to our carousel. You can enable these by adding a <code>rn-carousel-indicator="true"</code> attribute on your <code>ul</code>.</p>

<p>The indicators are produced by the <code>rn-carousel-indicators</code> directive, completely decoupled, during the linking phase. For the directive to be executed, we compile it through the <code>$compile</code> service before appending it to our container.</p>

<p>It just takes <code>items</code> and <code>index</code> attributes that will be injected in an isolated scope to produce the indicators and set the CSS classes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// enable carousel indicator</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">showIndicator</span> <span class="o">=</span> <span class="p">(</span><span class="nx">iAttrs</span><span class="p">[</span><span class="s1">&#39;rnCarouselIndicator&#39;</span><span class="p">]</span><span class="o">===</span><span class="s1">&#39;true&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">showIndicator</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// as the HTML contains a directive, we need to $compile it</span>
</span><span class='line'>    <span class="c1">// before appending it to our container</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">indicator</span> <span class="o">=</span> <span class="nx">$compile</span><span class="p">(</span><span class="s2">&quot;&lt;div id=&#39;&quot;</span> <span class="o">+</span> <span class="nx">carouselId</span> <span class="o">+</span><span class="s2">&quot;-indicator&#39; &quot;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s2">&quot; index=&#39;carouselIndex&#39; items=&#39;carouselItems&#39; rn-carousel-indicators &quot;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s2">&quot; class=&#39;rn-carousel-indicator&#39;&gt;&lt;/div&gt;&quot;</span>
</span><span class='line'>    <span class="p">)(</span><span class="nx">scope</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">container</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">indicator</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>6) offer a two-way data binding for the active slide index</strong></p>

<p>The carousel current index position can be data-bound to an optional <code>rn-carousel-index</code> attribute if provided. This allows you to display the carousel position somewhere else, add custom controls/indicators, initialise to a different slide&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// set initial position at first slide</span>
</span><span class='line'><span class="nx">scope</span><span class="p">.</span><span class="nx">carouselIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">iAttrs</span><span class="p">.</span><span class="nx">rnCarouselIndex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//  if a binding attribute is present, use it.</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">activeModel</span> <span class="o">=</span> <span class="nx">$parse</span><span class="p">(</span><span class="nx">iAttrs</span><span class="p">[</span><span class="s1">&#39;rnCarouselIndex&#39;</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;carouselIndex&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// when the carousel internal index changes, update the model</span>
</span><span class='line'>        <span class="nx">activeModel</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">scope</span><span class="p">.</span><span class="nx">$parent</span><span class="p">,</span> <span class="nx">newValue</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">scope</span><span class="p">.</span><span class="nx">$parent</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="nx">$parse</span><span class="p">(</span><span class="nx">iAttrs</span><span class="p">.</span><span class="nx">rnCarouselIndex</span><span class="p">),</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// when the model change, update the local position</span>
</span><span class='line'>        <span class="c1">// this is also useful for the initial position</span>
</span><span class='line'>        <span class="nx">scope</span><span class="p">.</span><span class="nx">carouselIndex</span> <span class="o">=</span> <span class="nx">newValue</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">updateSlidePosition</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// if no index attribute, just watch internal index and update display</span>
</span><span class='line'>    <span class="nx">scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;carouselIndex&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">updateSlidePosition</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>updateSlidePosition()</code> function simply moves the <code>ul</code> block based on the <code>carouselIndex</code> value and the width of the slides. We do this with CSS transition and <code>translate3d</code> so this is animated and hardware accelerated.</p>

<p><strong>7) tests and grunt automation</strong></p>

<p>These subjects will have a dedicated article soon :)</p>

<p><strong>Limitations</strong></p>

<ul>
<li>Only works with ul/li structure</li>
<li>Carousel dimensions is based on the first li detected</li>
</ul>


<p><strong>UPDATE</strong> : the carousel can now be buffered to improve performance with large datasets !</p>

<p><strong>Easy isn&#8217;t it ?</strong></p>

<p>If you have questions, suggestions, issues, pulls requests&#8230; just comment below or on Github :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS tips'n'tricks part 1]]></title>
    <link href="http://blog.revolunet.com/blog/2013/05/01/angular-tips-n-tricks/"/>
    <updated>2013-05-01T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/05/01/angular-tips-n-tricks</id>
    <content type="html"><![CDATA[<p>In the past few months we learned a lot of new AngularJS stuff. Here is a first bunch of tricks, please comment and help us improve theses exemples if your tricks are even more awesome :)</p>

<p>We compiled most of our <a href="https://gist.github.com/revolunet/4657146">best AngularJS ressources in a gist</a> and we maintain a list of related  twitter accounts here : <a href="https://twitter.com/revolunet/angularjs">https://twitter.com/revolunet/angularjs</a>.</p>

<h3>Scopes</h3>

<p>You definitely need to read this article : <a href="http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs">http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs</a></p>

<h3>Directives</h3>

<p>The official documentation is not crystal clear at first approach but it documents most of what you need to understand: <a href="http://docs.angularjs.org/guide/directive">http://docs.angularjs.org/guide/directive</a>. So read it. And again. And again.</p>

<h3>Watch an object or a list</h3>

<p>If you watch a list or an object with the <code>objectEquality</code> parameter not set, then the <code>$watch</code> callback won&#8217;t be triggered if the object is only updated partially. Setting it to <code>true</code> will trigger it on any modification; this has performance impact so use carefully.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// the last `true` means compare by value and not by ref, useful for nested objects :)</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;myConfig&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;myConfig changed !&#39;</span><span class="p">,</span> <span class="nx">newValue</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="kc">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Two way data binding attribute without explicit scope declaration.</h3>

<p>Sometimes you need to access a directive attribute with a two-way data binding without declaring it explicitely in the directive scope configuration. You can do this using the <code>$parse</code> service.</p>

<p>If your directive scope is isolated (<code>scope: {}</code>) you have to use <code>scope.$parent</code> instead of <code>scope</code>.</p>

<iframe style="width: 100%; height: 500px" src="http://jsfiddle.net/p2cjt/embedded/js,html,result/light/"></iframe>


<br><br>


<h3>Use a callback function with arguments in your directive</h3>

<p>To call a function defined in one of your attribute, declare it in the scope with <code>&amp;</code>.</p>

<p>If you need to pass arguments, you must execute the callback using an object form for the arguments. AngularJS then call the function with your arguments in the correct order comparing your object and the callback declaration.</p>

<p>The following example also demonstrates how to watch multiples values at once.</p>

<iframe style="width: 100%; height: 500px" src="http://jsfiddle.net/HnrV7/embedded/js,html,result/light/"></iframe>


<br><br>


<h3>Custom transclusion</h3>

<p>This example shows how to define a custom transclusion function and modify its scope.</p>

<iframe style="width: 100%; height: 400px" src="http://jsfiddle.net/pHZNY/embedded/js,html,result/light/"></iframe>


<br><br>


<h3>Announcer/Notifier pattern</h3>

<p>If you need to listen to DOM objects creation/deletion, you can simply create a &#8216;notifier&#8217; directive and an &#8216;announcer&#8217; directive that you&#8217;ll add to the objects you want to monitor. That directive will announce new instances creation (<code>link</code> called) and destruction (<code>scope.$destroy</code> called).</p>

<p>It can be useful if you want to monitor arbitrary objects lifecycles, for example a <code>ng-repeat</code>. The &#8216;announcement&#8217; can be made via events, or better, using a custom notifier controller. All credits goes to @garanajpr for the ideas.</p>

<iframe style="width: 100%; height: 400px" src="http://jsfiddle.net/4ULCS/embedded/js,html,result/light/"></iframe>


<br><br>


<p>Many more tricks to come, stay tuned :)</p>

<p><strong>UPDATE</strong> : checkout <a href="http://blog.revolunet.com/blog/2013/07/23/angularjs-tips-n-tricks-2/">PART 2</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using AngularJS views animations for mobile applications]]></title>
    <link href="http://blog.revolunet.com/blog/2013/04/30/angularjs-animations-mobile-applications/"/>
    <updated>2013-04-30T20:20:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/04/30/angularjs-animations-mobile-applications</id>
    <content type="html"><![CDATA[<p>AngularJS team recently added the very expected animation feature to their framework. You can have a great overview with the <a href="http://www.youtube.com/watch?v=cF_JsA9KsDM">Miško Hevery introduction video</a> and a complete overview article at the great <a href="http://www.yearofmoo.com/2013/04/animation-in-angularjs.html">Year of Moo blog</a>.</p>

<p>From now (AngularJS 1.1.4), you can easily animate any directive, just by adding an <code>ng-animate</code> attribute and defining the animation CSS class.</p>

<p><strong>UPDATE</strong> : AngularJS team <a href="https://github.com/angular/angular.js/commit/fd21c7502f0a25364a810c26ebeecb678e5783c5">fixed the following</a> problem in the last 1.1.5 release. The ng-animate will now be evaulated on each animation, Yahoo :)</p>

<p><strong>UPDATE</strong> : Just created an much more simpler example based on AngularJS 1.2; check it out : <a href="http://embed.plnkr.co/p7WZdsy0FznV3zo7VWjU/">http://embed.plnkr.co/p7WZdsy0FznV3zo7VWjU/</a></p>

<p>As a mobile web developer, the first thing that come to mind is animating your mobile applications views. Its quite easy to add slide-in effects with the current routing system :</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/8pny4/embedded/result,js,html,css/light/"></iframe>


<br><br>


<p>As you can see, the code is very simple code and the animation is always the same (appear from right). But typically, if you open a screen in your mobile application, and there is a &#8216;Back&#8217; button, the user expects the slide animation to be reversed when he touches it. If you don&#8217;t do this, you expose your users to an unexpected behaviour, and an akward #WTF moment.</p>

<p>With the actual AngularJS implementation, there is a problem with the <code>ng-view</code> directive, which is heavily used for the AngularJS routing : it doesn&#8217;t handle dynamic <code>ng-animate</code> directive at all, despite what says the doc. You can only set the enter and leave animation once, because these <a href="https://github.com/angular/angular.js/blob/400f9360bb2f7553c5bd3b1f256a5f3db175b7bc/src/ng/directive/ngView.js#L173">are set at linking time</a> in case of the ng-view. And thus, you can only have one pre-defined enter and leave animation for your application view and for the whole application lifecycle.</p>

<p>There are a <a href="https://github.com/angular/angular.js/issues/2480">few</a> <a href="https://github.com/angular/angular.js/issues/2464">issues</a> opened and we can hope the team must be working on it and that should be resolved some day.</p>

<p>But an easy workaround to achieve this is to act on the enter and leave CSS classes themselves directly. Instead of changing the CSS classes names at the DOM level, one could update the CSS classes definitions to achieve the same result without even touching the DOM. The ng-view directive still has the same enter and leave CSS classes names and instead we change theses classes definition, and thus the animation direction.</p>

<p>There are several ways to do this. We could dynamically add a stylesheet to the document, or change the stylesheet source using <code>ng-src</code> attribute but this wouldn&#8217;t be very efficient due to multiple downloads of the ressource.</p>

<p>But, as we are AngularJS powered, we could simply <strong>bind a style tag to a javascript variable</strong> so it can be updated dynamically like any other DOM element.</p>

<p>Here&#8217;s how we&#8217;ve done bi-directionnal animations for the ng-view. Note the usage of the <code>ng-bind-html-unsafe</code> that take cares of not escaping the CSS output and the use of <code>transition</code> and <code>transform</code> CSS properties to force the use of GPU and improve the animation smoothness, especially on mobile devices.</p>

<iframe style="width: 100%; height: 350px" src="http://jsfiddle.net/UvP54/embedded/result,js,html,css/light/"></iframe>


<br><br>


<p>Another clever solution, as pointed out by Andrej in the comments below, is to simply wrap the <code>ng-view</code> in another div that have a dynamic class name, which could change when we need to change the animation direction, like <code>LR</code> then <code>RL</code>. This way we just need to update that classname and the CSS will pick the good one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.LR</span> <span class="nc">.enter-setup</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
</span><span class='line'><span class="nc">.LR</span> <span class="nc">.leave-setup</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
</span><span class='line'><span class="nc">.RL</span> <span class="nc">.enter-setup</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
</span><span class='line'><span class="nc">.RL</span> <span class="nc">.leave-setup</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Cheat Sheet]]></title>
    <link href="http://blog.revolunet.com/blog/2013/04/15/octopress-cheatsheet/"/>
    <updated>2013-04-15T01:46:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/04/15/octopress-cheatsheet</id>
    <content type="html"><![CDATA[<p>When you switch to Octopress for blogging there are a very few things to know :</p>

<h2>Command line</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># create a new post</span>
</span><span class='line'>rake new_post<span class="o">[</span><span class="s1">&#39;Title of the post&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># create a new page </span>
</span><span class='line'>rake new_page<span class="o">[</span><span class="s1">&#39;Title of the page&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># preview your work</span>
</span><span class='line'>rake preview
</span><span class='line'>
</span><span class='line'><span class="c"># publish it</span>
</span><span class='line'>rake generate <span class="o">&amp;&amp;</span> rake deploy
</span><span class='line'>
</span><span class='line'><span class="c"># commit and backup(automatic message)</span>
</span><span class='line'>git commit -am <span class="s2">&quot;`date`&quot;</span> <span class="o">&amp;&amp;</span> git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Creating a post</h2>

<p>You can create a post just by adding a .markdown file in the source/_posts folder and preview it with <code>rake preview</code>. The name of the file will be your post url so use an appropriate <a href="http://en.wikipedia.org/wiki/Slug_(web_publishing)#Slug">slugified name</a>.</p>

<p>You must add some metas at the top of the file :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: My Awesome article.
</span><span class='line'>date: 2013-05-1 00:00
</span><span class='line'>categories: news technology web
</span><span class='line'>author: Super Man
</span><span class='line'>comments: <span class="nb">true</span>
</span><span class='line'>published: <span class="nb">false</span>
</span><span class='line'>---
</span></code></pre></td></tr></table></div></figure>


<p>If you set <code>published: false</code>, your posts will only be visible in preview mode.</p>

<h2>Publish</h2>

<p>When ready, just use <code>rake generate &amp;&amp; rake deploy</code> to publish it :)</p>

<p>Here&#8217;s a micro script to simplify the publish process, jsut put it in the blog root folder :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="c"># push.sh : publish &amp; commit with a single command</span>
</span><span class='line'>git add <span class="nb">source</span>
</span><span class='line'>git commit -am <span class="s2">&quot;`date`&quot;</span> <span class="o">&amp;&amp;</span> git push origin <span class="nb">source</span>
</span><span class='line'>rake generate <span class="o">&amp;&amp;</span> rake deploy
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A fresh start]]></title>
    <link href="http://blog.revolunet.com/blog/2013/04/11/a-fresh-start/"/>
    <updated>2013-04-11T01:46:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/04/11/a-fresh-start</id>
    <content type="html"><![CDATA[<p>Our good old WordPress blog has been shutdown since a few months and now its time for us to start a brand new blogging adventure with OctoPress. As expected, we&#8217;ll talk about Web technologies, Rich web applications, Javascript, Python and Phonegap among others.</p>

<p>We&#8217;ve got so many stories to tell, so many tips to share and so much code to dissect, so stay tuned.</p>

<p>140 chars isn&#8217;t long enough.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Welcome :)&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
