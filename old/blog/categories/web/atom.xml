<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web | revolunet blog]]></title>
  <link href="http://blog.revolunet.com/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://blog.revolunet.com/"/>
  <updated>2016-06-28T23:58:10+02:00</updated>
  <id>http://blog.revolunet.com/</id>
  <author>
    <name><![CDATA[revolunet team]]></name>
    <email><![CDATA[contact@revolunet.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Extend Google Spreadsheets with npmcdn.com and React]]></title>
    <link href="http://blog.revolunet.com/blog/2016/02/08/extend-google-apps-scripts-with-npmcdn-and-react/"/>
    <updated>2016-02-08T00:00:00+01:00</updated>
    <id>http://blog.revolunet.com/blog/2016/02/08/extend-google-apps-scripts-with-npmcdn-and-react</id>
    <content type="html"><![CDATA[<p>Sometimes you need a solid platform where people can <strong>collaborate in real-time and input data in a structured, reusable way</strong>. Depending on your needs and planning, Google Spreadsheet can be helpful in such cases, specially if you dont have time or ressources to create a full-blown "admin interface".</p>

<p>Of course, a tailored-made admin interface can be "better", but well, Google Spreadsheet is here, <strong>instantly available</strong>, battle-tested, powerful, very flexible and as we'll see below, you can even extends the UI.</p>

<p>Also note the powerful Google data APIs gives you <strong>full access to your data</strong> in various ways and there many other ways to exploit yout documents data (create executable APIs, publish the feeds, embed spreadsheet...)</p>

<p>The main issues for me yet are the google apps scripts disastrous developer experience, but i'll give you some tips to reduce the pain :) (most of it is due to security model) and the UI that can be a bit slowish due to client/server interactions.</p>

<p>This example use React, because it's sooo 2015, but you'd better use what makes you happy :)</p>

<h2>How it works</h2>

<p>You google spreadsheets can be extended with <a href="https://developers.google.com/apps-script/reference/spreadsheet/">Google Apps Scripts</a>. These are hosted Javascript files that execute on the server-side, in the Google infrastructure, and have access to various Google APIs and can be triggered right from your documents.</p>

<p>In the case of spreadsheets, these scripts can open <strong>custom isolated modals or sidebars</strong>, which can host random client-side javascript inside an iframe, get data from your docs and send back results to them.</p>

<p>So in this example, we'll add a multi-selection widget to our spreadsheet, which will help our users create many-to-many relations in our spreadsheet.</p>

<p><img src="//blog.revolunet.com/images/gdoc-apps-script-custom-widget.gif"></p>

<h2>Google Apps Script editor</h2>

<p>This is a <strong>major pain in the @$$</strong>. When you want to script your documents, you must use that editor which lacks all the basics. There are ways to use your preferred editor and GIT, but it's for a later article.</p>

<p>We'll reduce the code needed here to the minimum : just some glue between our documents and our react widgets.</p>

<p>From you spreadsheet, select <code>Tools &gt; Script Editor</code>.</p>

<p>From here, you can add <code>.gs</code> scripts (server-side javascript) and <code>.html</code> templates which are your custom modals or sidebars and where you can interpolate some values from your docs, using old-school php-like tags.</p>

<p>The code from your html files <strong>cannot talk directly to the documents</strong> but can execute functions from your <code>.gs</code> files.</p>

<h2>The <code>.gs</code> files</h2>

<p>The code here is interpreted when the document opens, on the server-side.</p>

<p>For example, here's how you'd add a new menu entry to your document :</p>

<p>```js
// add a custom menu when the spreadsheet opens
function onOpen() {
   SpreadsheetApp.getUi()</p>

<pre><code>  // create a new menu in your spreadsheet
  .createMenu('My Custom menu')
  // add an entry to that menu
  .addItem('Select Guests', 'selectGuests')
  // Warn: forgetting this line can drive you nuts
  .addToUi();
</code></pre>

<p>}
```</p>

<p>Then you can define a <code>selectGuests</code> function that do what you need.</p>

<p>In our case, it will open our custom sidebar and pass necessary data (a list of available guests to select from a range in the spreadsheet).</p>

<h2>A custom sidebar with a React widget</h2>

<p>There are various approaches here :</p>

<ul>
<li>create a full bundle with all your javascripts and insert it in the page</li>
<li>use external scripts and add minimal code to the html</li>
</ul>


<p>I prefer the second approach because its lighter and allow cient-side caching for 3rd-party libraries which is faster.</p>

<p>There is a little gem recently published at <a href="npmcdn.com">npmcdn.com</a>; this service from the well-named <a href="http://twitter.com/@mjackson">Michael Jackson</a> allows you to grab any npm module just by adding a script-tag to your html doc. This is the perfect tool to inject <strong>umd libraries</strong> into our iframe.</p>

<p>Here's an example sidebar.html :</p>

<p>```html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;link rel="stylesheet" href="https://ssl.gstatic.com/docs/script/css/add-ons1.css"&gt;
&lt;script src="http://blog.revolunet.com//npmcdn.com/react@0.14.7/dist/react.js"&gt;&lt;/script&gt;
&lt;script src="http://blog.revolunet.com//npmcdn.com/react-dom@0.14.7/dist/react-dom.js"&gt;&lt;/script&gt;
&lt;script src="http://blog.revolunet.com//npmcdn.com/react-multiselect-revolunet@1.0.5"&gt;&lt;/script&gt;
</code></pre>

<p>  </head>
  <body></body>
  <script></p>

<pre><code>// receive some values from spreadsheet here
// turn back strings to JSON
var choices = JSON.parse("&lt;?= choices ?&gt;");

// instantiate the react component with props
// using the umd library name
var cmp = React.createElement(window['react-multiselect-revolunet'], {
   choices: choices,
   onChange: function(selection) {
      // send result to spreadsheet function
      google.script.run.setActiveCellValue(selection.join(','));
   }
});

// render the component
ReactDOM.render(cmp, document.body);
</code></pre>

<p>  </script>
</html>
```</p>

<h2>Open the Sidebar</h2>

<p>The is an example <code>code.gs</code> that triggers our sidebar, send and receives values from it.</p>

<p>```js
// this function will be called by our sidebar to update the cell value
function setActiveCellValue(value) {
  SpreadsheetApp.getActiveSheet().getActiveCell().setValue(value);
}</p>

<p>// this is called when user selects the entry in the custom menu
function selectGuests() {
  // open our sidebar with a range of possibles from A2:A range
  openSideBar("Select Guests", "'Sheet1'!A2:A", 0, 0);
}</p>

<p>/<em>
 * title: Title of the SideBar
 * range: range where to get choices from
 * valueIndex: 0-based index of the column in the range responsible of values
 * labelIndex: 0-based index of the column in the range responsible of labels (can be the same as values)
</em>/
function openSideBar(title, range, valueIndex, labelIndex) {</p>

<p>  // grab list of available choices
  var choices = SpreadsheetApp.getActiveSheet().getRange(range).getValues();</p>

<p>  // create the template from HTML
  var tpl = HtmlService.createTemplateFromFile('pane.html');</p>

<p>  // add data to the templates. needs to be passed as strings !
  // data structure depends on your widget
  tpl.choices = JSON.stringify(choices.map(function(choice) {</p>

<pre><code>return {
  value: choice[valueIndex],
  text: choice[labelIndex]
};
</code></pre>

<p>  }).filter(function(val) {</p>

<pre><code>return val.value &amp;&amp; val.text;
</code></pre>

<p>  }));</p>

<p>  // now, evaluate and execute our template inside a sidebar
  var result = tpl.evaluate().setSandboxMode(HtmlService.SandboxMode.IFRAME);
  result.setTitle(title).setWidth(300);
  SpreadsheetApp.getUi().showSidebar(result);
}
```</p>

<h2>Conclusion</h2>

<p>With these few tips, you're now able to build on top of Google Spreadsheets and add the missing parts you need.</p>

<p>Dont build your company on top of any closed-source product.</p>

<p>Exploit the tools, push the limits, but always keep full control of your data. (see the recent <a href="http://venturebeat.com/2016/02/06/how-to-avoid-the-next-parse-shutdown-scenario/">Parse shutdown</a>)</p>

<p>Once your spreadsheet is well-strutured, you can use the Google Data APIs to extract them, or use one of many available npm modules to do it, like <a href="https://www.npmjs.com/package/spreadsheet-to-json">spreadsheet-to-json</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The web developer survival guide]]></title>
    <link href="http://blog.revolunet.com/blog/2015/09/04/the-web-developer-survival-guide/"/>
    <updated>2015-09-04T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2015/09/04/the-web-developer-survival-guide</id>
    <content type="html"><![CDATA[<p>Applicable mostly to frontend web development teams.</p>

<p>Comments welcome :)</p>

<p>On the same subject, by Eric Eliott : <a href="https://medium.com/javascript-scene/how-to-build-a-high-velocity-development-team-4b2360d34021">How to Build a High Velocity Development Team</a></p>

<p>Even if the main factor for a project success is human relations, providing a friendly, secure and comfy development workflow for your team is essential to improve happiness, and thus encourage high-quality standards.</p>

<h2>TL;DR</h2>

<ul>
<li>Premature optimisation is the root of all evil</li>
<li>Simple and fast dev workflow</li>
<li>Standards tools</li>
<li>Early feedback</li>
<li>Modularity</li>
<li>Quality</li>
</ul>


<h2>Project management</h2>

<p>Reduce the number of tools you use :</p>

<ul>
<li>Issues, milestones... : GitHub + ZenHub</li>
<li>Slack for centralized communication</li>
<li>Markdown :)</li>
</ul>


<p>As a product owner, define clear goals and deadlines, and detailed user stories and mockups that will act as base reference for future milestones.</p>

<p>As a developer, expose your plans when starting working on a new feature so you can have early feedback from your team. Github issues are cool for that. Think <a href="http://tom.preston-werner.com/2010/08/23/readme-driven-development.html">Readme Driven Development</a>.</p>

<p>Avoid slack-driven-development which can lead to precipitate design decisions, premature optimisations and throwaway features through endless chats; prefer argumented GH issues.</p>

<p>Dont wait months to receive feedback on your feature. Release early to get early end-user feedback and favour useful features.</p>

<p><img src="http://2.bp.blogspot.com/-Yjx5G4Nihko/VWYhDiery2I/AAAAAAAACOY/49BYuU3SJ7s/s1600/Spotify.png" alt="lean" /></p>

<h2>Versionning</h2>

<p>Use GIT with GitHub and a simple but <a href="https://gist.github.com/jbenet/ee6c9ac48068889b0912">effective model</a>.</p>

<p>TL;DR :</p>

<ul>
<li>Production-ready <code>master</code> branch</li>
<li>Pull requests from feature-branches to <code>master</code></li>
<li>Hotfixes pull requests to master</li>
<li>Always mention related issues in commit messages</li>
<li>Use a <code>develop</code> branch to receive PRs for huge upgrades</li>
<li>Never, ever, <code>push --force</code> to a shared branch</li>
</ul>


<p><img src="http://nicoespeon.com/assets/img/git/github-flow-branching-model.jpg" alt="github flow" /></p>

<p>Use <a href="https://gist.github.com/stephenparish/9941e89d80e2bc58a153">standard commit messages</a>, respect <a href="http://semver.org/">SemVer</a> :  Breaking.Feature.Patch.</p>

<p>See <a href="https://github.com/semantic-release/semantic-release">semantic-release</a> for automatic semver based on commit messages.</p>

<h2>Standards</h2>

<p>Choose and use battle-tested industry tools, standards and styleguides.</p>

<p>Provide sane and homogenous defaults for developer environnement :</p>

<ul>
<li>.editorconfig</li>
<li>.babelrc</li>
<li>.eslintrc</li>
<li>npm scripts</li>
</ul>


<p>Don't rush on the new hype; Tools are continuously and fastly improving but early adoption means upgrading the whole team skills and may have significant impact on your workflow.</p>

<p>Experiment, make proof-of-concepts, evaluate advantages and anticipate migrations.</p>

<p>Once maturity is here and adoption is wide enough and if effort is worthwhile, engage progressive migration.</p>

<h2>Modularity</h2>

<p>You don't want to create a monolithic, highly-coupled application.</p>

<p>Break problems into smaller parts.</p>

<p>From the UNIX philosophy : Build small programs that do one thing, do it well, and compose easily with other programs.</p>

<p>Which means small, focused, testable and tested JavaScript modules, providing a nice API.</p>

<p>see <a href="https://github.com/mattdesl/module-best-practices">JS Modules best practices</a> and <a href="http://addyosmani.com/first/">FIRST principles</a></p>

<p>npm ecosystem is an incredible ressource for JavaScript modules which  come with already existing tests and corner-cases solved for you. USE IT !</p>

<p>npm is a also a powerful packaging tool that makes it easy to publish your own modules and manage dependencies at scale.</p>

<p>By separating concerns of your modules you'll improve your velocity and reduce hassle due to working in complex contexts.</p>

<p>Focusing on a specific problem without worrying about third party is the key to solve it.</p>

<p><img class="center" src="/images/lego-bricks.jpg"></p>

<h2>Quality</h2>

<p>Unit tests will build trust, save your ass, and make the developer feel more confident to work without breaking something, thus, make him/her much more productive, and happy.</p>

<p>Test the public API, not the internal implementations.</p>

<ul>
<li><a href="https://medium.com/javascript-scene/what-every-unit-test-needs-f6cd34d9836d">5 Questions Every Unit Test Must Answer</a></li>
<li><a href="https://medium.com/javascript-scene/why-i-use-tape-instead-of-mocha-so-should-you-6aa105d8eaf4">Why I use Tape instead of Mocha &amp; so you should</a></li>
</ul>


<p>Test coverage will give you cool insights and motivate you to do more.</p>

<p>Add UI tests (aka "smoke tests") to ensure integration and prevent repetitive and boring manual in-browser course tests.</p>

<p>Tests won't guarantee your code is bug-free but will increase quality (early bug fixes + easy refactoring), and most importantly, allow developers to iterate quickly in confidence.</p>

<p>The earlier the bugs are discovered, the cheaper they are to fix.</p>

<p><img src="http://www.jamkey.fr/wp-content/uploads/2015/05/bugs-prices.png" alt="bugs cost" /></p>

<h2>Developer Experience</h2>

<p>Offer powerful MacBooks or Linux laptops.</p>

<p>Comment the code (JsDoc) and provide nice README.md files.</p>

<p>Adding inline comments is cheap and helps later refactoring; Explain the WHY of your code when its not obvious.</p>

<p>Make development fast and easy : when working on a new feature, the developer should be able to install the environment quickly, and iterate with blazing-fast build times and hot-reload.</p>

<p>Choose a solid boilerplate with all your sane defaults.</p>

<ul>
<li>for react : <a href="https://github.com/mzabriskie/rackt-cli">rackt-cli</a></li>
<li>for angular : <a href="https://github.com/Swiip/generator-gulp-angular">generator-gulp-angular</a> - see also <a href="https://github.com/ng-tools/ng-factory">ng-factory</a>, the upgradable development workflow for AngularJS.</li>
<li>for node+babel : <a href="https://github.com/revolunet/node-babel-boilerplate">node-babel-boilerplate</a></li>
</ul>


<h2>Team</h2>

<p>Work hard, Play hard.</p>

<p>Be nice and always be yourself.</p>

<p>There's nothing as powerful as trust when you want to move mountains.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create and host a beautiful website for free using GitHub]]></title>
    <link href="http://blog.revolunet.com/blog/2015/07/15/beautiful-static-website-in-minutes-with-github/"/>
    <updated>2015-07-15T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2015/07/15/beautiful-static-website-in-minutes-with-github</id>
    <content type="html"><![CDATA[<p>In this tutorial i'll show you how you can setup, publish and host a nice single-page website in minutes and completely free of charge using Github pages.</p>

<p>I assume you're you are already familiar with :</p>

<ul>
<li><strong>HTML</strong> : <a href="http://www.cheatography.com/davechild/cheat-sheets/html4/">cheat sheet</a></li>
<li><strong>GitHub</strong> : create a free account here : <a href="http://github.com">github.com</a></li>
</ul>


<p>We'll use the awesome GitHub.com to host our <strong>static website</strong> and create it using an existing template. Github hosts your website code history publicly and you benefit, among other things, from code versionning and free, high-quality hosting (cdn, ddos protection...).</p>

<p><strong>WARN</strong> Files stored on Github are public to anyone (except if you buy a private repo), so don't store anything sensible here.</p>

<h2>What is a "static" website ?</h2>

<p>For small websites, CMS solutions like WordPress and equivalents are largely overkill and require some technical setup and mandatory maintenance mostly due to security patches and unattended upgrades.</p>

<p>Nowadays, it is possible to create awesome websites in a server-less way, using only client-side technologies. This mean you can host your website anywhere without any configuration, as all the code executes is only in the final user browser (HTML, Javascript and CSS), and this has several advantages :</p>

<ul>
<li>simple</li>
<li>no maintenance</li>
<li>no hacking</li>
<li>better performance</li>
<li>less is more</li>
<li>simple is beautiful</li>
</ul>


<p>Any serious business now offers an API that you can integrate in some way your static website if you need so this static approach has <strong>NO LIMIT</strong>.</p>

<p>Next articles will provide more advanced examples using a <a href="https://www.staticgen.com/">static website
 generator</a>.</p>

<h2>Create the Github repository</h2>

<p>create a new repository for your website : <a href="https://github.com/new">https://github.com/new</a> ex: mywebsite</p>

<p>This will create a public repository at <a href="https://github.com/USERNAME/mywebsite">https://github.com/USERNAME/mywebsite</a></p>

<h2>Single page website with Github page generator</h2>

<p>3-clicks setup using one of the GitHub built-in templates</p>

<p>Go to your github project page, <a href="https://github.com/USERNAME/mywebsite">https://github.com/USERNAME/mywebsite</a></p>

<ul>
<li>Go to <strong>repository settings</strong> (icon in the right-bottom)</li>
<li><strong>Automatic page generator</strong> and click <strong>Launch</strong></li>
<li>Edit your website text</li>
<li>Select a template and <strong>Publish Page</strong></li>
</ul>


<p>Wait a few seconds and goto : <a href="http://USERNAME.github.io/mywebsite">http://USERNAME.github.io/mywebsite</a></p>

<p><strong>✔</strong> your website is up :)</p>

<h2>Edit the website online</h2>

<p>Go to your github project page, <a href="https://github.com/USERNAME/mywebsite">https://github.com/USERNAME/mywebsite</a></p>

<p>This is all your websites files.</p>

<p>Click the file you want to edit, for example <code>index.html</code> (main page), make your changes then click the "pen" icon on top-right of the editor.</p>

<p>Under the file editor there's a "Commit changes" form, set the title to a good description of your changes : ex: "contact info update"</p>

<p>Press <strong>Commit changes</strong> button.</p>

<p>Wait a few seconds and goto : <a href="http://USERNAME.github.io/mywebsite">http://USERNAME.github.io/mywebsite</a></p>

<p><strong>✔</strong> your website is updated :)</p>

<h2>Edit the website on your computer</h2>

<p>For more advanced edition and comfort you may want to edit from your <a href="http://atom.io">preferred text editor</a> on your computer.</p>

<p>Setup the GitHub app with your account : <a href="http://mac.github.com">mac.github.com</a> or <a href="http://windows.github.com">windows.github.com</a></p>

<ul>
<li><strong>Clone</strong> the project on your computer, it will download the code from github</li>
<li><strong>Edit</strong> the files on your computer, add javascript, images, etc...</li>
<li><strong>Test</strong> if everything works locally</li>
<li>Then <strong>Commit</strong> those files with an explicit message from github app</li>
<li><strong>Sync</strong> with Github</li>
</ul>


<p><strong>✔</strong> your website is updated :)</p>

<h2>Test the website locally</h2>

<p>You can open the file in your web browser to test the result.</p>

<p><strong>WARN</strong> If you added google maps or some javascript API, be sure to run <code>python -m SimpleHTTPServer</code> from your console in the project folder, and use http://127.0.0.1:8000 in the browser.</p>

<h2>Use great templates</h2>

<p>If you want different templates than github ones, you just need to replace your repository content with the new one.</p>

<p>Choose one of the high-quality template from <a href="http://html5up.net">html5up.net</a> or <a href="http://pixelarity.com">pixelarity.com</a>, download and extract to your project folder.</p>

<p>Edit the files, test, commit &amp; sync and you're done.</p>

<h2>Next steps</h2>

<p>Learn Markdown syntax : <a href="https://en.support.wordpress.com/markdown-quick-reference/">reference</a></p>

<p>Learn GIT : <a href="https://try.github.io">try.github.io</a></p>

<p>Learn Javascript : <a href="http://jsbooks.revolunet.com">jsbooks.revolunet.com</a> and <a href="https://ericelliottjs.com/product/programming-javascript-applications-paper-ebook-bundle/">Eric Elliott book</a></p>

<h2>FAQ</h2>

<h3>How do i setup a domain name ?</h3>

<ul>
<li>Buy a domain from <a href="http://gandi.net">gandi.net</a> (or other serious one)</li>
<li>Edit the domain "DNS zone" and follow the <a href="https://help.github.com/articles/tips-for-configuring-a-cname-record-with-your-dns-provider/">github dns instructions</a></li>
<li>add <code>CNAME</code> file, containing <code>www.myproject.com</code>, to your repository</li>
</ul>


<p>The DNS changes can take up to 24h before propagating so try www.myproject.com tomorrow</p>

<p>Github Help :  <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/">custom domain</a>, <a href="https://help.github.com/articles/tips-for-configuring-a-cname-record-with-your-dns-provider/">dns setup</a></p>

<h3>How to add a page ?</h3>

<p>Just add some more html files, like "products.html" and add a link to it from index : <code>&lt;a href="products.html"&gt;products&lt;/a&gt;</code>.</p>

<h3>How to get traffic analytics ?</h3>

<p>If you want to track your visitors and analyse where they come from and what they do on your website, create an account on <a href="http://www.google.com/analytics">Google Analytics</a> and add the tracker to your page code.</p>

<h3>How to add a Map ?</h3>

<p>If you need an interactive map, you can follow <a href="https://developers.google.com/maps/tutorials/fundamentals/adding-a-google-map">Google Maps instructions</a>.</p>

<p>Alternatively, follow <a href="http://leafletjs.com/examples/quick-start.html">Leaflet instructions</a> to take avantage of the OpenStreetMap project, which is community driven, free and open source.</p>

<p>If you just need a map image : generate the HTML code from here : <a href="http://staticmapmaker.com">staticmapmaker.com</a> ad copy the "HTML" to your page. Full static images doc : <a href="https://developers.google.com/maps/documentation/staticmaps/">https://developers.google.com/maps/documentation/staticmaps/</a></p>

<h3>How to add comments ?</h3>

<p>Create an account on <a href="disqus.com">disqus.com</a> and add the javascript code to your page.</p>

<h3>How to add a contact form ?</h3>

<p>Create an account on <a href="typeform.com">typeform.com</a> and add the javascript code to your page, create the form there and copy the javascript "embed" code to your page.</p>

<p>Alternatively : Create an account on <a href="mailchimp.com">mailchimp.com</a>, create the form there and copy the javascript "embed" code to your page.</p>

<h3>How to receive payments ?</h3>

<p>Create an account on <a href="stripe.com">stripe.com</a> and add the javascript code to your page.</p>

<h3>What is gh-pages ?</h3>

<p><code>gh-pages</code> is a special "branch" (source code version) on github that automagically publish and host a static website.</p>

<p>If you have any question, feel free to ask below :)</p>
]]></content>
  </entry>
  
</feed>
