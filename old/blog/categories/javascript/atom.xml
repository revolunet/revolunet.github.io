<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | revolunet blog]]></title>
  <link href="http://blog.revolunet.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://blog.revolunet.com/"/>
  <updated>2016-06-28T23:58:10+02:00</updated>
  <id>http://blog.revolunet.com/</id>
  <author>
    <name><![CDATA[revolunet team]]></name>
    <email><![CDATA[contact@revolunet.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Universal .htaccess CORS support]]></title>
    <link href="http://blog.revolunet.com/blog/2013/10/03/universal-CORS-htaccess/"/>
    <updated>2013-10-03T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/10/03/universal-CORS-htaccess</id>
    <content type="html"><![CDATA[<h2>What is CORS</h2>

<p>In the internet AJAX early days (~2000) browsers vendors implemented a strict cross-domain communication policy that prevented javascript on a given page to communicate with third party domains. Many workarounds have been implemented since, like JSONP, which is only a 'hack' allowing cross-domain communication using javascirpt callbacks; Handy, but this prevents any other method than GET and forces the use of querystring to pass parameters.</p>

<p>With the RISE of internet APIs and decentralised services, having a way to communicate with 3rd party domain became critical; thus, the <a href="http://www.w3.org/TR/cors/">W3C defined the CORS</a> protocol, acronym which stands for "Cross-Origin Resource Sharing" and allows different domains to communicate together, the same way Adobe Flash did it a long time before with the crossdomain.xml policy (remember?).</p>

<p>Now with CORS, the server defines which domains (applications) can communicate with him (or anyone). When CORS is enabled on the server, your javascript can communicate transparently using any HTTP method; For non-GET requests, the browser transparently make an initial OPTIONS request to check if the request is allowed or not, and then makes the real request.</p>

<h2>CORS-enable your API</h2>

<p>You can find the whole specs and various implementations at <a href="http://enable-cors.org/">enable-cors.org</a>.</p>

<h2>Pain-free CORS for Apache servers</h2>

<p>If you don't want to change your code, we've crafted a small .htaccess for you that will force CORS on your API, without even touching your code. Just drop one of the implementations in your .htaccess and your API is magically CORS-enabled :)</p>

<p><div><script src='https://gist.github.com/revolunet/6295643.js'></script>
<noscript><pre><code># with AJAX withCredentials=false (cookies NOT sent)
Header always set Access-Control-Allow-Origin &quot;*&quot;                   
Header always set Access-Control-Allow-Methods &quot;POST, GET, PUT, OPTIONS, PATCH, DELETE&quot; 
Header always set Access-Control-Allow-Headers &quot;X-Accept-Charset,X-Accept,Content-Type&quot;
RewriteEngine On                  
RewriteCond %{REQUEST_METHOD} OPTIONS 
RewriteRule ^(.*)$ $1 [R=200,L,E=HTTP_ORIGIN:%{HTTP:ORIGIN}]]

# with AJAX withCredentials=true (cookies sent, SSL allowed...)
SetEnvIfNoCase ORIGIN (.*) ORIGIN=$1
Header always set Access-Control-Allow-Methods &quot;POST, GET, PUT, OPTIONS, PATCH, DELETE&quot; 
Header always set Access-Control-Allow-Origin &quot;%{ORIGIN}e&quot;
Header always set Access-Control-Allow-Credentials &quot;true&quot;
Header always set Access-Control-Allow-Headers &quot;X-Accept-Charset,X-Accept,Content-Type&quot;
RewriteEngine On
RewriteCond %{REQUEST_METHOD} OPTIONS
RewriteRule ^(.*)$ $1 [R=200,L,E=HTTP_ORIGIN:%{HTTP:ORIGIN}]
</code></pre></noscript></div>
</p>

<p>Note: If you use the withCredentials version, be sure to add <code>withCredentials: true</code> in your AJAX requests.</p>

<p>You can validate your API CORS support using this demo : <a href="http://embed.plnkr.co/1E8ot9e1eVs23IrjzqKr/preview">http://embed.plnkr.co/1E8ot9e1eVs23IrjzqKr/preview</a></p>

<p>Hope this helps !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extending the Topcoat CSS framework]]></title>
    <link href="http://blog.revolunet.com/blog/2013/09/30/extending-topcoat-css-framework/"/>
    <updated>2013-09-30T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/09/30/extending-topcoat-css-framework</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p><a href="http://topcoat.io">Topcoat.io</a> is the new kid on the block of the CSS-only frameworks. It's the first one that's built for performance from the ground up, thanks to the constant performance tracking using Chrome telemetry, which makes it a tool of choice to build your mobile applications UI.It is also easy to theme and customize thanks to a smart CSS organisation and a powerful toolchain.</p>

<p>Topcoat has been built for the future, thanks toÂ solid conventions and a cutting-edge javascript architecture, and more goodness :</p>

<ul>
<li><a href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/">BEM syntax</a> convention</li>
<li><a href="http://learnboost.github.io/stylus/">stylus</a> CSS preprocessor</li>
<li><a href="http://gruntjs.com">grunt</a> task automation</li>
<li><a href="https://github.com/topcoat/topdoc">TopDoc</a> CSS documentation generator</li>
<li><a href="http://npmjs.org">npm</a> for dependencies</li>
</ul>


<p>It's fully open source, not "fauxpen source", and the contributors uses various online tools to run the project :</p>

<ul>
<li><a href="http://github.com/topcoat">Github</a> of course for code and issues</li>
<li><a href="http://codepen.io/Topcoat">codepen.io</a> to prototype and host widgets demos</li>
<li><a href="http://huboard.com/topcoat/topcoat">huboard</a> to manage milestones on top of Github issues</li>
</ul>


<p>All of this make it a powerful framework made to be extensible and performant.</p>

<h2>Install Topcoat</h2>

<p>Just <a href="https://github.com/topcoat/topcoat/releases">download the latest release</a> from github and extract it. The release contains the final CSS with dark and light themes for desktop and mobile, so you can use then directly; just add a link to the <code>topcoat-mobile-light.min.css</code> file in your app for example.</p>

<p>If you want to customize the themes or add new components, you need to run <code>npm install</code> from the topcoat folder. This will download all the widgets sources and local dependencies to your <code>node_modules</code> folder.</p>

<p>Some important things to notice :</p>

<ul>
<li>Each component (button, list, checkbox...) has its own folder in the <code>node_modules</code> subfolder (so each one has its own npm repo). Each one also has its own gruntfile in case you want to build its css separately.</li>
<li>Most of components have a <code>topcoat-[COMPONENT]-base</code> folder with just enough CSS to completely reset the styling of the element, so other components can override it entirely. For example the default button hasn't any default border or background and looks like a simple text block;</li>
<li>The <code>topcoat-theme</code> folder defines the 4 builtin Topcoat themes which are just a combination of variables that defines some variations of the components.</li>
<li>The main Gruntfile list the available themes and associated widgets using pattern globbing and this is from where the final CSS are built, including the given widgets.</li>
</ul>


<h2>Adding a custom theme</h2>

<p>You can easily tweak the builtin themes by modifying the variables inside the <code>topcoat-theme</code> folder then run <code>grunt</code> to rebuild the final CSS. But its much better to add your own theme and leave the others untouched.</p>

<p>Let's add a simple green theme :</p>

<ul>
<li>copy the <code>topcoat-theme/src/theme-topcoat-*</code> file from the theme that matches the most your design, eg copy <code>theme-topcoat-mobile-light.styl</code> to <code>theme-green.styl</code>.</li>
<li>create a <code>variables-green.styl</code> with a bunch of variables that override the default ones (see the list of variables in the other variables-* files). For example :</li>
</ul>


<p>```js
// base colors
var-color = #00b400
var-background-color = #e2ffe2
var-placeholder-color--input = #4eff4e
var-background-color--down = #00b400
var-background-color--hover = #02ff01
var-border--focus = 1px solid #00b400
var-box-shadow--focus = 0 0 0 2px #00b400</p>

<p>// cta button colors
var-background-color--cta = #00b300
var-border--cta = 1px solid #006700
var-background-color--cta--down = #00b400
var-background-color--cta--hover = #02ff01
```</p>

<ul>
<li>add <code>@import variables-green</code> to your <code>theme-green.styl</code>. (This allows you later to combine some variables files)</li>
<li><p>add the theme link in the main gruntfile, 'stylus' section:
```js
stylus: {
 green: {</p>

<pre><code> options: {
     import: ['theme-green', 'utils']
 },
 files: [{
     src: [
         // here you can eventually add/remove some components from the output
         'node_modules/topcoat-*/src/**/*.styl'
         ],
     dest: 'css/topcoat-green.css'
 }]
</code></pre>

<p> }
}
```</p></li>
<li><p>Now run <code>grunt</code> and you'll see your final <code>topcoat-green.css</code> and  <code>topcoat-green.min.css</code> appear magically in the CSS folder :)</p></li>
<li>You also have a <code>demo/topcoat-green.html</code> file for free that show you the final result, generated via TopDoc.</li>
</ul>


<h2>Add a custom component</h2>

<p>Now, let's say you want to add a custom button to the generated theme, for example <code>button-round</code>.</p>

<p>Add a <code>node_modules/topcoat-button-round</code> folder and create <code>src/topcoat-button-round.styl</code> file. Inside, add your round button definition, with the documentation to generate the demo :</p>

<p>```css
// import anything you need to extend
@import topcoat-button
/* topdoc
  name: Round Button
  description: A simple, yet round button
  modifiers:</p>

<pre><code>:active: Round button active state
:disabled: Disabled state
:hover: Hover state
:focus: Focused
</code></pre>

<p>  markup:</p>

<pre><code>&lt;button class="topcoat-button--round"&gt;Button&lt;/button&gt;
&lt;button class="topcoat-button--round" disabled&gt;Button&lt;/button&gt;
</code></pre>

<p>  tags:</p>

<pre><code>- desktop
- light
- mobile
- button
- round
</code></pre>

<p>*/
.topcoat-button--round {</p>

<pre><code>@extend .topcoat-button
border-radius: 999px;
</code></pre>

<p>}</p>

<p>.topcoat-button--round:disabled {
  @extend .topcoat-button:disabled
}</p>

<p>.topcoat-button--round:hover {
  @extend .topcoat-button:hover
  text-shadow: var-text-shadow;
  box-shadow: var-box-shadow;
}</p>

<p>.topcoat-button--round:focus {
  @extend .topcoat-button:focus
}</p>

<p>.topcoat-button--round:active {</p>

<pre><code>color: var-color;
text-shadow: var-text-shadow;
background-color: var-background-color--down;
box-shadow: var-box-shadow--down;
</code></pre>

<p>}
```</p>

<p>Now, when you'll run <code>grunt</code> again, the final CSS will include your button definition and the <code>demo/topcoat-green.html</code> demo page will present your new button with related documentation.</p>

<h2>Creating new Topcoat components</h2>

<p>Now you know how to add custom components and integrate them in the Topcoat workflow properly.</p>

<p>If you're willing to share new components with the community (and you should), here's the workflow :</p>

<ul>
<li>demo your component markup and css on <a href="http://codepen.io">codepen.io</a></li>
<li>create a github repo for your component, using the same structure as any of the <code>node_modules/topcoat-*</code> folder.</li>
<li>if accepted, your component will be added to the main Topcoat <code>package.json</code> then auto-installed with <code>npm install</code>.</li>
</ul>


<h2>Need help ?</h2>

<p>Comment below, use Github issues or join the #topcoat irc channel to discuss :)</p>

<p><strong>I hope this quick intro will help you choose Topcoat as your next CSS framework and you will contribute to the project so we can build together a better CSS framework.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phonegap day Amsterdam 2013]]></title>
    <link href="http://blog.revolunet.com/blog/2013/09/24/phonegap-day-amsterdam/"/>
    <updated>2013-09-24T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/09/24/phonegap-day-amsterdam</id>
    <content type="html"><![CDATA[<p>Once again, i've been lucky enough to go to Amsterdam today to attend the Phonegap Europe annual conference.</p>

<p>The <a href="http://www.compagnietheater.nl/compagnietheater.html">venue</a> was great, the talks covered various subjects, and, most importantly, the atmosphere reflected a positive and healthy community : open-minded and confident in the open web as a major platform for the future of mobile applications.</p>

<p>Almost 2 years after Adobe took control of Nitobi (the team behind the Phonegap genesis), the Phonegap project is in a great shape, dynamic, more open than ever, and with a sane and solid codebase, powered by node.js and a modern javascript toolchain, thanks to the hard work of the core team and many contributors.</p>

<p>With the 3.0 version, released a few weeks ago, Phonegap is now mature and flexible enough to serve as a foundation for your various mobile projects. Every single plugin has been extracted from codebase, which is now focused on bridging performance and plugin management.</p>

<p><strong>Phonegap is the perfect example of how open source can increase code quality and grow a solid community while serving a company business.</strong></p>

<p>Here is a quick recap of the most notable talks.</p>

<h3>Distimo</h3>

<p>Distimo is an app-analytic company that analyses app downloads, conversions and profits and compute smart data for the app developers.</p>

<p>They shared some interesting metrics :</p>

<ul>
<li>33% of worlwide app revenues comes from Asia.</li>
<li>Globally, ~65% of revenues comes from the AppStore and ~35% from Play Store (growing fast).</li>
<li>Candy Crush saga makes as much money in Asia on both iOS or Android</li>
<li>Games of course dominates stores revenues</li>
</ul>


<p>More data at : <a href="http://www.distimo.com/publications">http://www.distimo.com/publications</a></p>

<h3>Untappd</h3>

<p>Demo of one of the most successfull Phonegap apps : Untappd, a beautiful beer-centered social network app with 700k users and 4 stars rating. <a href="https://untappd.com/">Join now !</a></p>

<h3>Blackberry loves the web</h3>

<p>Too late maybe ?</p>

<h3>Native UI in Phonegap Apps</h3>

<p>Tanaka Masahiro demoed the <a href="https://github.com/monaca/monaca-framework-ios">Monaca hybrid framework</a> which gives you the ability to add native UI elements to your Phonegap app. You can wrap the phonegap webview with native tabbar/navigation bar to improve your UX, specially revelant on older Android devices. The framework also allows native transitions between various webviews, but this breaks application state. The framework hasn't yet migrated to phonegap 3.0 so not usable as is IMHO.</p>

<p>Interesting real hybrid approach that demonstrates again that Phonegap is not necessarly a "full web" solution, but you can use as much "native" stuff as needed.</p>

<h3>Apple phonegap apps rejection prevention</h3>

<p><a href="https://twitter.com/rdlauer">Rob Lauer</a> from <a href="http://www.kendoui.com/">kendoui</a> shared his experiences about mobile web apps rejection reasons on the Apple Store.</p>

<p>Here's a bunch of common best practices to prevent your Phonegap app to be rejected :</p>

<ul>
<li>Make an app, not a website</li>
<li>Create unique and useful apps</li>
<li>Don't use annoying ads</li>
<li>User registration shouldn't be mandatory (at least a free demo access)</li>
<li>Don't force users to validate CGU</li>
<li>Never tag your app version lower to 1.0</li>
<li>Should work offline with minimal features</li>
<li>Don't load remote code that change your app behaviour</li>
<li>Use beautiful, homogenous icons</li>
<li>Write accurate app description</li>
<li>Don't try to steal Apple money, use in-app payments or die instantly</li>
</ul>


<h3>Topcoat.io</h3>

<p>Kristofer Joseph, original <a href="http://topcoat.io">TopCoat</a> author, talked about this beautiful and slick CSS framework focused on performance and themability.</p>

<p>TopCoat.io provides various widgets as pure HTML/CSS and, most importantly, provides the best technical stack ever to extend it cleanly :</p>

<ul>
<li><a href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/">BEM CSS syntax</a> convention</li>
<li><a href="http://gruntjs.com">grunt</a>-based automation</li>
<li><a href="npmjs.org">npm</a> dependencies management</li>
<li><a href="https://github.com/topcoat/topdoc">TopDoc</a> documentation generator</li>
<li><a href="http://www.chromium.org/developers/telemetry">chrome telemetry</a>  performance analysis</li>
<li><a href="codepen.io">codepen.io</a> as a prototyping tool</li>
<li>What else ??</li>
</ul>


<p>Another great example of a successful project, open-sourced from day one and following the best practices from the ground up.</p>

<p>TopCoat is definitely shaped for the future and you can already use it in your Phonegap projects !</p>

<p>Check out <a href="https://twitter.com/devgirlfl">@devgirlfl</a> article &amp; demo : <a href="http://devgirl.org/2013/08/29/totally-rad-topcoat/">http://devgirl.org/2013/08/29/totally-rad-topcoat</a></p>

<h3>WizCorp HTML5 gaming</h3>

<p>Yes you can build great games with Phonegap. You don't necessarly draw directly inside the webview, but as phonegap is very open and extensible, you can easily plug native features as needed, like <a href="http://impactjs.com/ejecta">Ejecta</a> (off browser canvas+audio for iOS), webGL views... WizCorp team shares some interesting code <a href="https://github.com/Wizcorp">on their github</a>, like a native spinner, navigation views helper...</p>

<h3>Chrome Cordova plugins</h3>

<p>This may be the biggest announce of this event : We can now use Chrome APIs right in our cordova applications. For the moment, we just have socket, storage, notifications, and identity (oauth), but in a near future, we'll see support for syncFileSystem (synced data across devices) and more.</p>

<p>Basically, this means that you can code a Chrome Packaged App using only chrome APIs, then distribute it on desktop via the chrome store and then on mobile app stores using cordova !</p>

<p>This is very early stage but Google puts some efforts to stabilize and extend capabilities quickly.</p>

<p>All Chrome javascript APIs : <a href="http://developer.chrome.com/apps/api_index.html">http://developer.chrome.com/apps/api_index.html</a></p>

<p>Cordova implemented APIs can be found at : <a href="http://plugins.cordova.io">http://plugins.cordova.io</a></p>

<h3>Testing with appium.io</h3>

<p><a href="http://twitter.com/filmaj">Fil Maj</a> demonstrated <a href="http://appium.io">appium</a>, an open source end-to-end testing platform that fully support phonegap applications. You can write automation scripts (think selenium) then run them on your own devices, or use appium infrastructure to run the tests on various devices and produces detailed reported.</p>

<p>In a world of such devices fragmentation, this can be very useful :)</p>

<h3>Firefox OS</h3>

<p>Phonegap now also support Firefox OS ;) and Firefox provides many more javascript APIs, like 'Activites' (think Web intents). If you support the real open web, Mozilla is definitely the way to go :)</p>

<h3>Phonegap CLI</h3>

<p>This awesome talk by <a href="twitter.com/mwbrooks">Michael Brooks</a> was the most interesting and technical talk of the day. Michael showed us how powerful the cordova and phonegap CLI are. Based on a cutting edge javascript architecture, the phonegap CLI is made of nodes modules that you can use directly in the CLI, or as external nodeJS modules, which allows you to integrate the whole workflow in third-party tools and vice-versa. open source power :)</p>

<p>He also demonstrated how easy it is to create and compile apps with or without the locally installed SDKs, using phonegap build as a fallback. Just run for example <code>phonegap compile ios</code> from your machine, then in seconds you get back a QRcode that you can scan to test your final app on a real device instantly; neat !</p>

<h4>Finally, a big thanks to <a href="https://twitter.com/colene">Colene</a>, <a href="https://twitter.com/ppk">Peter Paul Koch</a> and all the Phonegap team for this event, can't wait for next year :)</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[npm vs pip]]></title>
    <link href="http://blog.revolunet.com/blog/2013/09/18/npm-vs-pip/"/>
    <updated>2013-09-18T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/09/18/npm-vs-pip</id>
    <content type="html"><![CDATA[<p>After my morning <a href="https://twitter.com/revolunet/status/380210846578016256">twitter rant</a> about <code>npm install &gt; pip install</code> i need to add some clarifications and explain why i meant. Basically i meant that npm is much easier to use from a user perspective, which is an essential point to grow a community. Package management and dependencies is an important part of modern application development workflow and thus needs high consideration.</p>

<p><a href="https://npmjs.org/">npm</a> (node packaged modules) was released at end of 2011 and for sure it's inspired from many other packages manager while removing their commons hassles. Also, its used both on backend and on frontend projects (eg: AngularJS+grunt).</p>

<p>Some of the <a href="http://www.pip-installer.org/en/latest/">pip</a> hassles are :</p>

<ul>
<li>you need to install virtualenv separately</li>
<li>you need to configure it and run cryptic commands to activate virtualenvs</li>
<li>you can install virtualenvwrapper to make thing easier though</li>
<li>you still need to configure it though</li>
<li>a fresh <code>pip install</code> in a project containing the standard requirements.txt does nothing</li>
</ul>


<p>On the other side, npm is a no-brainer to use :</p>

<ul>
<li><code>npm install</code> installs/upgrades any project dependencies</li>
<li>there's no notion of virtualenv, it just uses what you have in the current <code>node_modules</code> folder or in your global install.</li>
</ul>


<p>Both are for sure very powerful tools that goes far beyond this basic usage but this is daily work for the developer and also the first contact when entering a new project so it should work seamlessly.</p>

<p>Please correct me if i'm wrong :)</p>
]]></content>
  </entry>
  
</feed>
